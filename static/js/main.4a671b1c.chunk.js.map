{"version":3,"sources":["gDrive/constants.js","gDrive/driveApiV3.js","gDrive/pickerApi.js","gDrive/utils.js","gDrive/gapi.js","gDrive/helpers.js","gDrive/hooks.js","components/button.jsx","Routes.js","App.js","index.js"],"names":["API_KEY","DISCOVERY_URLS","DRIVE_API_SCOPES","recommended","file","install","SCOPES","join","DRIVE_UI_INTEGRATION_TYPES","openWithAppSpecificDocument","newButton","DriveApiV3","getImageById","fileId","gapi","client","drive","files","get","alt","supportsAllDrives","fields","then","res","a","console","log","mimeType","headers","src","btoa","body","catch","err","error","getFileFields","JSON","parse","getAbout","about","uploadFile","fetch","method","Headers","Authorization","auth","getToken","access_token","json","createFile","resource","create","reso","PickerWidget","callback","imgSettings","handlePickerLoad","this","isPickFile","createPicker","Promise","rej","load","onerror","oauthToken","myDriveView","google","picker","DocsView","ViewId","FOLDERS","setLabel","setOwnedByMe","setIncludeFolders","setSelectFolderEnabled","sharedDriveView","setEnableDrives","sharedWithMeView","starredView","setStarred","PickerBuilder","addView","setOAuthToken","setDeveloperKey","setCallback","d","pickerCallback","enableFeature","Feature","SUPPORT_DRIVES","setTitle","build","setVisible","data","cb","Response","ACTION","Action","PICKED","pickedObj","DOCUMENTS","id","PickFile","PickFolder","addScript","url","script","document","createElement","onload","appendChild","Gapi","openWithState","driveActiveImageId","imgOptions","window","GapiBrowserLibrary","loadClient","initClient","init","auth2","getAuthInstance","signIn","currentUser","signOut","disconnect","resetProgressCallback","loadDriveShare","token","share","ShareClient","s","setItemIds","showSettingsDialog","getGrantedScopes","userIdFromDrive","GoogleAuth","isSignedIn","grantedScopes","appdata","includes","isSameId","getId","handleAuthorizeDriveModal","signInWithGoogle","isSameUser","isUserAcceptedNewSigninFlow","confirm","alert","apiKey","clientId","discoveryDocs","scope","id1","id2","drawOnCanvas","width","height","canvas","getElementById","ctx","getContext","baseImage","Image","drawImage","handleDriveUpload","parents","baseGroup","upscale","fileImgName","qualityValue","type","originalWidth","originalHeight","isPdf","isDownload","upscaleSize","undefined","getPdfBlobAndSave","getImgBlobAndSave","blob","metadata","name","form","FormData","append","Blob","stringify","testUpload","handlDriveUploadForPicker","authUser","parentsResp","handleDriveDownload","handleDriveDownloadForPicker","useGDrive","location","useLocation","history","useHistory","useEffect","searchParams","URLSearchParams","search","has","state","integrationType","stateKeys","Object","keys","isUserId","isAction","isIds","isExportIds","isFolderId","openWithGoogleWorkspaceDocument","getDriveUiIntegrationType","replace","userId","user","ids","filePermissions","imageMediaMetadata","Button","useState","scopes","setScopes","handleGrantedScopesClick","split","filter","val","onClick","shareDrive","signOutGoogle","revokeAccess","map","Main","Code","Router","exact","path","component","App","className","ReactDOM","render"],"mappings":"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","file":"static/js/main.4a671b1c.chunk.js","sourcesContent":["// scripts\nexport const GOOGLE_API_CLIENT_API_SCRIPT_URL = 'https://apis.google.com/js/api.js';\n\n// URLs\nexport const DRIVE_MULTIPART_UPLOAD_URL = 'https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id';\n\n// configs\nexport const API_KEY = 'AIzaSyAuVXgAR4aI47Fxg4ztfBpLpb_IafzKsMY';\nexport const CLIENT_ID = '58948318321-knaasj1fie9mmvd715621ua0f7drspkd.apps.googleusercontent.com';\nconst DRIVE_API_DISCOVERY_DOCUMENT = 'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'\n// const MARKETPLACE_API_DISCOVERY_DOCUMENT = 'https://appsmarket.googleapis.com/$discovery/rest?version=v2';\n\nexport const DISCOVERY_URLS = [\n  DRIVE_API_DISCOVERY_DOCUMENT,\n  // MARKETPLACE_API_DISCOVERY_DOCUMENT\n];\nexport const DRIVE_API_SCOPES = {\n  recommended: {\n    // appdata: 'https://www.googleapis.com/auth/drive.appdata',\n    file: 'https://www.googleapis.com/auth/drive.file',\n    install: 'https://www.googleapis.com/auth/drive.install',\n  },\n  // sensitive: {\n  //   appsReadOnly: 'https://www.googleapis.com/auth/drive.apps.readonly',\n  // },\n  // restricted: {\n  //   metadata: 'https://www.googleapis.com/auth/drive.metadata',\n  //   readonly: 'https://www.googleapis.com/auth/drive.readonly',\n  //   metadataReadonly: 'https://www.googleapis.com/auth/drive.metadata.readonly',\n  //   full: 'https://www.googleapis.com/auth/drive',\n  //   activity: 'https://www.googleapis.com/auth/drive.activity',\n  //   activityReadonly: 'https://www.googleapis.com/auth/drive.activity.readonly',\n  //   scripts: 'https://www.googleapis.com/auth/drive.scripts',\n  // },\n};\n\nexport const SCOPES = [\n  DRIVE_API_SCOPES.recommended.file,\n  DRIVE_API_SCOPES.recommended.install,\n].join(' ');\n\n// string names\nexport const DRIVE_UI_INTEGRATION_TYPES = {\n  openWithAppSpecificDocument: 'openWithAppSpecificDocument',\n  // openWithGoogleWorkspaceDocument: 'openWithGoogleWorkspaceDocument',\n  newButton: 'newButton',\n};\n\nexport const DRIVE_API_FIELDS = {\n  about: {\n    storageQuota: 'storageQuota',\n  }\n}","import {\n  DRIVE_MULTIPART_UPLOAD_URL,\n  // DRIVE_API_FILE_SEARCH_PICSART_ROOT_FOLDER_QUERY,\n  // DRIVE_API_FILE_RESOURCE_FIELDS,\n} from './constants';\n\nconst DriveApiV3 = {\n  getImageById(fileId) {\n    return (\n      gapi.client.drive.files.get({\n        fileId,\n        alt: 'media',\n        supportsAllDrives: true,\n        fields: 'id, name',\n      })\n        .then(async res => {\n          console.log(res)\n          const mimeType = res.headers['Content-Type'];\n          const src = `data:${mimeType};base64, ${btoa(res.body)}`;\n          return { src, mimeType };\n        })\n        .catch(err => console.error(err))\n    );\n  },\n\n  getFileFields({fileId, fields}) {\n    return (\n      gapi.client.drive.files.get({\n        fileId,\n        fields,\n        supportsAllDrives: true,\n      })\n        .then(res => JSON.parse(res.body))\n        .catch(err => console.error(err))\n    );\n  },\n\n  getAbout(fields) {\n    return (\n      gapi.client.drive.about.get({\n        fields,\n      })\n        .then(res => JSON.parse(res.body))\n        .catch(err => console.error(err))\n    );\n  },\n\n  // getFileParents({ fileId, fields }) {\n  //   return (\n  //     gapi.client.drive.files.get({\n  //       fileId,\n  //       fields,\n  //       supportsAllDrives: true,\n  //     })\n  //       .then(res => JSON.parse(res.body))\n  //       .catch(err => console.error(err))\n  //   );\n  // },\n\n  // getFilePermissions(fileId) {\n  //   return (\n  //     gapi.client.drive.files.get({\n  //       fileId,\n  //       fields: 'permissions',\n  //       supportsAllDrives: true,\n  //     })\n  //       .then(res => JSON.parse(res.body))\n  //       .catch(err => console.error(err))\n  //   );\n  // },\n\n  uploadFile(body) {\n    // need add supportsAllDrives: true param\n    return (\n      fetch(DRIVE_MULTIPART_UPLOAD_URL, {\n        method: 'POST',\n        headers: new Headers({ Authorization: `Bearer ${gapi.auth.getToken().access_token}` }),\n        body,\n      })\n        .then(res => res.json())\n        .catch(err => {\n          console.error(err);\n        })\n    );\n  },\n\n  // searchFiles({ q, fields }) {\n  //   return (\n  //     gapi.client.drive.files.list({\n  //       q,\n  //       fields,\n  //     })\n  //       .then(async res => {\n  //         const body = JSON.parse(res.body);\n  //         const { files } = body;\n  //         console.log(files);\n  //         return files;\n  //       })\n  //       .catch(err => console.error(err))\n  //   );\n  // },\n\n  createFile({ resource, fields }) {\n    return (\n      gapi.client.drive.files.create({\n        resource,\n        fields,\n      })\n        .then(res => {\n          console.log(res);\n          const reso = JSON.parse(res.body);\n          console.log(reso);\n          const { files } = JSON.parse(res.body);\n          console.log(files);\n          return files || reso;\n        })\n        .catch(err => console.error(err))\n    );\n  },\n};\n\nexport default DriveApiV3;\n\n// const token = gapi.auth.getToken().access_token;\n// fetch('https://appsmarket.googleapis.com/appsmarket/v2/customerLicense/58948318321/117831644331788887278', {\n//   headers: new Headers({ Authorization: `Bearer ${token}` }),\n// })\n//   .then(res => res.json())\n//   .catch(err => {\n//     console.error(err);\n//   })","import { API_KEY } from './constants';\nimport DriveApiV3 from './driveApiV3';\n\nclass PickerWidget {\n\n  async init(callback, imgSettings) {\n    console.log('class');\n    console.log('initPicker');\n    await PickerWidget.handlePickerLoad();\n    console.log(this.isPickFile)\n    await PickerWidget.createPicker(callback, imgSettings, );\n    console.log('picker created');\n  }\n\n  static handlePickerLoad() {\n    return new Promise((res, rej) => {\n      gapi.load('picker', { callback: res, onerror: rej });\n    });\n  }\n\n  static async createPicker(callback, imgSettings, isPickFile) {\n    console.log(callback, imgSettings);\n    const oauthToken = gapi.auth.getToken().access_token;\n\n    const myDriveView = new google.picker.DocsView(google.picker.ViewId.FOLDERS)\n      .setLabel('My Drive')\n      .setOwnedByMe(true)\n      .setIncludeFolders(true)\n      .setSelectFolderEnabled(true);\n\n    const sharedDriveView = new google.picker.DocsView(google.picker.ViewId.FOLDERS)\n      .setEnableDrives(true)\n      .setIncludeFolders(true)\n      .setSelectFolderEnabled(true);\n\n    const sharedWithMeView = new google.picker.DocsView(google.picker.ViewId.FOLDERS)\n      .setLabel('Shared with Me')\n      .setOwnedByMe(false)\n      .setIncludeFolders(true)\n      .setSelectFolderEnabled(true);\n\n    const starredView = new google.picker.DocsView(google.picker.ViewId.FOLDERS)\n      .setLabel('Starred')\n      .setStarred(true)\n      .setIncludeFolders(true)\n      .setSelectFolderEnabled(true);\n\n    const picker = new google.picker.PickerBuilder()\n      .addView(myDriveView)\n      .addView(sharedDriveView)\n      .addView(sharedWithMeView)\n      .addView(starredView)\n      .setOAuthToken(oauthToken)\n      .setDeveloperKey(API_KEY)\n      .setCallback(d => PickerWidget.pickerCallback(d, callback, imgSettings))\n      .enableFeature(google.picker.Feature.SUPPORT_DRIVES)\n      .setTitle('Pick a folder')\n      .build();\n    picker.setVisible(true);\n  }\n\n  static async pickerCallback(data, cb, imgSettings) {\n    console.log(data)\n    // if (data[google.picker.Response.ACTION] === google.picker.Action.PICKED) {\n    //   const image = await DriveApiV3.getImageById(data.docs[0].id);\n    //   console.log(image)\n    // }\n\n    // console.log(data, cb, imgSettings);\n    if (data[google.picker.Response.ACTION] === google.picker.Action.PICKED) {\n      const pickedObj = data[google.picker.Response.DOCUMENTS][0];\n      console.log(pickedObj)\n      console.log(pickedObj.id);\n      // cb(imgSettings, [pickedObj.id]);\n    }\n  }\n}\n\nexport const PickFile = new PickerWidget();\nconsole.log(PickFile)\nexport const PickFolder = new PickerWidget();\nconsole.log(PickFolder)\n","// eslint-disable-next-line\nexport const addScript = url => new Promise(res => {\n  const script = document.createElement('script');\n  script.src = url;\n  script.onload = () => {\n    res();\n  };\n  document.body.appendChild(script);\n});\n","import { addScript } from './utils';\nimport {\n  API_KEY,\n  CLIENT_ID,\n  DISCOVERY_URLS,\n  SCOPES,\n  GOOGLE_API_CLIENT_API_SCRIPT_URL,\n  DRIVE_API_SCOPES,\n} from './constants';\nimport { handleAuthorizeDriveModal, isSameId } from './helpers';\n\nclass GapiBrowserLibrary {\n  constructor() {\n    this.openWithState = null;\n    this.driveActiveImageId = null;\n    this.imgOptions = null;\n  }\n\n  async init() {\n    console.log('init check');\n    if (window.gapi) {\n      return;\n    }\n    console.log('init');\n    try {\n      await addScript(GOOGLE_API_CLIENT_API_SCRIPT_URL);\n      console.log('1');\n      await GapiBrowserLibrary.loadClient();\n      console.log('2');\n      await GapiBrowserLibrary.initClient();\n      console.log('3');\n      return gapi;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  static loadClient() {\n    return new Promise((res, rej) => {\n      gapi.load('client:auth2', { callback: res, onerror: rej });\n    });\n  }\n\n  static loadDriveShare() {\n    return new Promise((res, rej) => {\n      gapi.load('drive-share', { callback: res, onerror: rej });\n    });\n  }\n\n  static initClient() {\n    return (\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_URLS,\n        scope: SCOPES,\n      })\n    );\n  }\n\n  async signInWithGoogle() {\n    await this.init();\n    try {\n      const currentUser = await gapi.auth2.getAuthInstance().signIn();\n      return currentUser;\n    } catch (error) {\n      // error case: when user closes sign in prompt\n      console.log(error);\n      return error;\n    }\n  }\n\n  async signOutGoogle() {\n    await this.init();\n    gapi.auth2.getAuthInstance().signOut();\n  }\n\n  async revokeAccess() {\n    await this.init();\n    gapi.auth2.getAuthInstance().disconnect();\n  }\n\n  async shareDrive(resetProgressCallback) {\n    console.log('shareDrive');\n    await this.init();\n    await GapiBrowserLibrary.loadDriveShare();\n    const token = gapi.auth.getToken().access_token;\n    const s = await new gapi.drive.share.ShareClient();\n    s.setOAuthToken(token);\n    s.setItemIds(this.driveActiveImageId);\n    s.showSettingsDialog();\n    this.driveActiveImageId = null;\n    resetProgressCallback();\n  }\n\n\n  async getGrantedScopes() {\n    await this.init();\n    return gapi.auth2.getAuthInstance().currentUser.get().getGrantedScopes();\n  };\n\n  async authUser(userIdFromDrive) {\n    await this.init();\n    console.log('userIdFromDrive', userIdFromDrive);\n    const GoogleAuth = gapi.auth2.getAuthInstance();\n\n    // console.log('isSignedIn', GoogleAuth.isSignedIn.get(), GoogleAuth.currentUser.get().getBasicProfile().getEmail());\n\n    if (GoogleAuth.isSignedIn.get()) {\n      const grantedScopes = GoogleAuth.currentUser.get().getGrantedScopes();\n      const { recommended: { appdata, file, install } } = DRIVE_API_SCOPES;\n      if (grantedScopes.includes(appdata) && grantedScopes.includes(file) && grantedScopes.includes(install)) {\n\n      }\n      console.log(grantedScopes)\n      // check for scopes\n      if (userIdFromDrive) {\n        const isSameUser = isSameId(GoogleAuth.currentUser.get().getId(), userIdFromDrive);\n        if (isSameUser) {\n          console.log('already signin from drive and existing are same!!', userIdFromDrive);\n          return userIdFromDrive;\n        }\n        this.openWithState = null;\n        this.driveActiveImageId = null;\n        console.log('isSameUser is false');\n        console.log('signOut');\n        GoogleAuth.signOut();\n      } else {\n        console.log('userIdFromDrive is undefined');\n        return GoogleAuth.currentUser.get();\n      }\n    }\n\n    const res = handleAuthorizeDriveModal();\n    if (!res) return\n\n    const currentUser = await this.signInWithGoogle();\n\n    if (currentUser.error) {\n      // this.authUser();\n      console.log('currentUser.error')\n      this.openWithState = null;\n      this.driveActiveImageId = null;\n      return;\n    }\n    // const grantedScopes = currentUser\n    if (userIdFromDrive) {\n      const isSameUser = isSameId(currentUser.getId(), userIdFromDrive);\n      console.log('isSameUser', isSameUser);\n      if (!isSameUser) {\n        GoogleAuth.disconnect();\n        // eslint-disable-next-line\n        const isUserAcceptedNewSigninFlow = confirm(\"Drive account and choosed account doesn't match. Choose account again\");\n        if (isUserAcceptedNewSigninFlow) {\n          console.log('isUserAcceptedNewSigninFlow', isUserAcceptedNewSigninFlow);\n          // return handleAuthProcess(null, userIdFromDrive);\n        }\n        // eslint-disable-next-line\n        alert('Your state was lost');\n        return;\n      }\n      console.log('signin from drive first time');\n      return currentUser;\n    }\n    console.log('signin independent first time');\n    return currentUser;\n  }\n}\n\nconst Gapi = new GapiBrowserLibrary();\n\nexport default Gapi;\n","// import { getImgBlobAndSave } from 'utils';\n// import { getPdfBlobAndSave } from 'components/common/DownloadDropdown/download';\n\nimport DriveApiV3 from './driveApiV3';\nimport { DRIVE_UI_INTEGRATION_TYPES } from './constants';\nimport { PickFolder, PickFile } from './pickerApi';\nimport Gapi from './gapi';\n\nexport const addScript = url => new Promise(res => {\n  const script = document.createElement('script');\n  script.src = url;\n  script.onload = () => {\n    res();\n  };\n  document.body.appendChild(script);\n});\n\nexport const isSameId = (id1, id2) => id1 === id2;\n\nexport const getDriveUiIntegrationType = state => {\n\n  console.log(state)\n  const stateKeys = Object.keys(state);\n\n  const isUserId = stateKeys.includes('userId');\n  const isAction = stateKeys.includes('action');\n  const isIds = stateKeys.includes('ids');\n  const isExportIds = stateKeys.includes('exportIds');\n  const isFolderId = stateKeys.includes('folderId');\n  // const isResourceKeys = stateKeys.includes('resourceKeys');\n\n  /* userId and action are general for Open with and New button actions,\n    ids are for handling an Open with for an app-specific document,\n    exportIds are for handling an Open with for a Google Workspace document,\n    folderId is for handling a New URL */\n\n  if (isUserId && isAction && isIds) {\n    return DRIVE_UI_INTEGRATION_TYPES.openWithAppSpecificDocument;\n  }\n  if (isUserId && isAction && isExportIds) {\n    return DRIVE_UI_INTEGRATION_TYPES.openWithGoogleWorkspaceDocument;\n  }\n  if (isUserId && isAction && isFolderId) {\n    return DRIVE_UI_INTEGRATION_TYPES.newButton;\n  }\n};\n\n// export const getImageSize = src => new Promise(res => {\n//   const image = new Image();\n//   image.src = src;\n//   image.onload = () => {\n//     const { width, height } = image;\n//     res({ width, height });\n//   };\n// });\n\n// export const rgbColor1To255 = colorObj => {\n//   const colorObj255 = {};\n//   Object.entries(colorObj)\n//     .map(color => [color[0], Math.round(color[1] * 255)])\n//     .forEach(([name, value]) => colorObj255[name] = value);\n//   return colorObj255;\n// };\n\nexport const drawOnCanvas = async ({width, height, src}) => {\n  const canvas = document.getElementById('myCanvas');\n  const ctx = canvas.getContext('2d');\n  const baseImage = new Image();\n  baseImage.src = src;\n  baseImage.onload = () => {\n    canvas.width = width;\n    canvas.height = height;\n    ctx.drawImage(baseImage, 0, 0);\n  };\n};\n\nexport const handleDriveUpload = async ({\n  baseGroup,\n  upscale,\n  fileImgName,\n  qualityValue,\n  type,\n  originalWidth,\n  originalHeight,\n  isPdf,\n  isDownload,\n}, parents) => {\n  const upscaleSize = upscale ? upscale === 'x2' ? 2 : 4 : undefined;\n  const blob = isPdf\n    ? await getPdfBlobAndSave({\n      baseGroup, originalWidth, originalHeight, fileImgName, qualityValue, type, upscaleSize,\n    })\n    : await getImgBlobAndSave({\n      baseGroup, originalWidth, originalHeight, fileImgName, qualityValue, type, isDownload, upscaleSize,\n    });\n\n  console.log(blob);\n  const metadata = {\n    name: fileImgName,\n    mimeType: type,\n    parents,\n  };\n  console.log(metadata);\n  const form = new FormData();\n  form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));\n  form.append('file', blob);\n\n  console.log(form);\n\n  const res = await DriveApiV3.uploadFile(form);\n\n  Gapi.driveActiveImageId = res.id;\n};\n\nexport const testUpload = async () => {\n  console.log(Gapi)\n  const parents = await  DriveApiV3.getFileFields({fileId: Gapi.driveActiveImageId, fields: 'parents'})\n  console.log(parents)\n  const metadata = {\n    name: 'anun',\n    mimeType: Gapi.imgOptions.mimeType,\n    parents: parents.parents,\n  };\n  console.log(metadata);\n  const blob = Gapi.imgOptions.src;\n  const form = new FormData();\n  form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));\n  form.append('file', blob);\n\n  console.log(form);\n\n  const res = await DriveApiV3.uploadFile(form);\n};\n\nexport const handlDriveUploadForPicker = async imgSettings => {\n  await Gapi.authUser();\n  let parents;\n  // const drivefileId = Gapi.driveActiveImageId;\n  // only for test open picker\n  const drivefileId = undefined;\n  if (drivefileId) {\n    const parentsResp = await DriveApiV3.getFileParents({\n      fileId: drivefileId,\n      fields: 'parents, name',\n    });\n    parents = parentsResp.parents;\n    console.log('parnets', parents);\n    handleDriveUpload(imgSettings, parents);\n  } else {\n    console.log(' before  deletion');\n    PickFolder.init(handleDriveUpload, imgSettings);\n    console.log('parnets', parents);\n  }\n};\n\nconst handleDriveDownload = id => {\n  DriveApiV3.getImageById(id)\n};\n\nexport const handleDriveDownloadForPicker = async () => {\n  await Gapi.authUser();\n  console.log(PickFile);\n  PickFile.init(handleDriveDownload);\n  console.log(PickFile);\n}\n\nexport const handleAuthorizeDriveModal = () => {\n  // eslint-disable-next-line\n  const answer = confirm('Authorization required');\n\n  return answer\n}","import { useEffect } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n// import { useDispatch } from 'react-redux';\n\n// import canvas from 'store/canvas';\n\nimport {\n  getDriveUiIntegrationType,\n  drawOnCanvas,\n} from './helpers';\nimport DriveApiV3 from './driveApiV3';\nimport { DRIVE_UI_INTEGRATION_TYPES } from './constants';\nimport Gapi from './gapi';\n\nconst useGDrive = () => {\n  console.log('useGDrive');\n  const location = useLocation();\n  const history = useHistory();\n  // const dispatch = useDispatch();\n\n  useEffect(() => {\n    console.log('useGDrive eff');\n\n    const searchParams = new URLSearchParams(location.search);\n\n    if (!searchParams.has('state')) {\n      return null;\n    }\n\n    const state = JSON.parse(searchParams.get('state'));\n\n    const integrationType = getDriveUiIntegrationType(state);\n\n    console.log(integrationType);\n    \n    if (!integrationType) {\n      history.replace('/chooser');\n      return null;\n    }\n\n    (async () => {\n      await Gapi.init();\n\n      const user = await Gapi.authUser(state.userId);\n\n      console.log(user)\n      if (!user) {\n        history.replace('/editor?category=photos');\n        return;\n      }\n\n      if (integrationType === DRIVE_UI_INTEGRATION_TYPES.openWithAppSpecificDocument) {\n        Gapi.openWithState = state;\n        const [id] = state.ids;\n        // const fileParents = await DriveApiV3.getFileFields({ fileId: id, fields: 'parents, name' });\n        // console.log(fileParents);\n        // const folderPermissions = await DriveApiV3.getFileFields({ fileId: fileParents.parents[0], fields: 'permissions' });\n        // console.log(folderPermissions)\n        const filePermissions = await DriveApiV3.getFileFields({ fileId: id, fields: 'permissions' });\n        console.log(filePermissions);\n\n        Gapi.driveActiveImageId = id;\n        const fields = await DriveApiV3.getFileFields({ fileId: id, fields: '*'});\n        if(!fields) return \n        console.log(fields)\n        window.fields = fields\n        const { imageMediaMetadata: { width, height } } = fields;\n        const { src, mimeType } = await DriveApiV3.getImageById(id);\n\n        Gapi.imgOptions = { src, mimeType, width, height };\n        // dispatch(canvas.actions.setBlankCanvasSettings({\n        //   blank: true,\n        //   width,\n        //   height,\n        // }));\n        // history.replace(`/editor?customSize=${width}x${height}&unit=px&category=photos`);\n        drawOnCanvas(Gapi.imgOptions);\n        return;\n      }\n\n      // if (integrationType === DRIVE_UI_INTEGRATION_TYPES.openWithGoogleWorkspaceDocument) {}\n\n      if (integrationType === DRIVE_UI_INTEGRATION_TYPES.newButton) {\n        return\n        // state vercni tvyalnery vor karoxana export ani nuyn texum kam miangamic enq redirect anum\n        // ete folder id talis upload aneluc entadruma ytex isk vor folderum permission ncuni ytex el aberum create anel \n        // asuma file.create method ogtagorcel https://developers.google.com/drive/api/v3/integrate-create\n\n      }\n    })();\n  });\n};\n\nexport default useGDrive;\n","import { useState } from \"react\";\nimport { Gapi, handlDriveUploadForPicker, handleDriveDownloadForPicker } from \"../gDrive\";\nimport { testUpload } from '../gDrive/helpers';\n\nconst Button = () => {\n    const [scopes, setScopes] = useState([]);\n\n    console.log(Gapi);\n\n    const handlePickFileClick = () => {\n        handleDriveDownloadForPicker();\n    }\n\n    const handlePickFolderClick = () => {\n        const imgSettings = {};\n        handlDriveUploadForPicker(imgSettings);\n    }\n\n    const handleShareDriveClick = () => {\n        Gapi.shareDrive()\n    }\n    \n    const handleAuthClick = () => {\n        Gapi.authUser();\n    }\n    \n    const handleUploadClick = () => {\n        testUpload()\n    }\n\n    const handleSignInClick = () => {\n        Gapi.signInWithGoogle()\n    }\n\n    const handleSignOutClick = () => {\n        Gapi.signOutGoogle()\n    }\n\n    const handleRevokeAccessClick = () => {\n        Gapi.revokeAccess()\n    }\n\n    const handleGrantedScopesClick = async () => {\n        const scopes = await Gapi.getGrantedScopes();\n        setScopes(scopes.split(' ').filter(val => val.includes('auth')))\n    };\n\n    // const handleUploadDriveClick = () => {\n\n    // };\n\n    return (\n        <>\n            <div>\n                <button onClick={handleShareDriveClick}>Share Drive</button>\n                <button onClick={handleAuthClick}>Authorize</button>\n                <button onClick={handleUploadClick}>upload</button>\n                <button onClick={handleSignInClick}>signIn</button>\n                <button onClick={handleSignOutClick}>signOut</button>\n                <button onClick={handleRevokeAccessClick}>revoke access</button>\n                <button onClick={handlePickFileClick}>pick file</button>\n                <button onClick={handlePickFolderClick}>pick folder</button>\n                <button onClick={handleGrantedScopesClick}>see granted scopes</button>\n                {/* <button onClick={handleUploadDriveClick}>upload Drive</button> */}\n            </div>\n            {scopes.map(scope => <p key={scope}>{scope}</p>)}\n            <div>\n                <canvas id=\"myCanvas\"></canvas>\n            </div>\n            {/* <img id=\"driveImg\" src=\"\" alt=\"img\"/> */}\n        </>\n    )\n}\n\nexport default Button\n","import { Switch, Route } from 'react-router-dom';\nimport Button from './components/button';\nimport { useGDrive } from './gDrive';\n\nconst Main = () => <div>hi</div>;\n\nconst Code = () => <pre>console.log('aaaaaaaaa')</pre>\n\nconst Router = () => {\n  console.log('aaa')\n    useGDrive();\n\n    return (\n      <div>\n        <Button/>\n        <Code/>\n        <Switch>\n          <Route exact path=\"/\" component={Main} />\n          <Route exact path=\"/code\" component={Code} />\n        </Switch>\n      </div>\n    );\n  };\n  export default Router;","import { BrowserRouter } from 'react-router-dom';\nimport Router from './Routes';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Router/>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}