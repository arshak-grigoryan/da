{"version":3,"sources":["gDrive/constants.js","gDrive/driveApiV3.js","gDrive/gapi.js","gDrive/pickerApi.js","gDrive/helpers.js","gDrive/hooks.js","components/button.jsx","Routes.js","App.js","index.js"],"names":["API_KEY","DISCOVERY_URLS","DRIVE_API_SCOPES","recommended","file","install","SCOPES","join","DRIVE_UI_INTEGRATION_TYPES","DriveApiV3","userIdFromDrive","openWithState","newButtonState","imgOptions","getImageById","fileId","gapi","client","drive","files","get","alt","fields","response","headers","btoa","body","console","log","getFileFields","JSON","parse","result","uploadFile","fetch","method","Headers","Authorization","auth","getToken","access_token","reponse","json","Gapi","apiKey","clientId","discoverUrls","scopes","GapiClient","a","window","addScript","loadClient","initClient","this","init","auth2","getAuthInstance","signIn","currentUser","signOut","disconnect","resetProgressCallback","loadDriveShare","token","share","ShareClient","s","setOAuthToken","setItemIds","driveActiveImageId","showSettingsDialog","getId","handleCheckGorGrantedScopes","revokeAccess","confirm","getBasicProfile","getEmail","handleSignInPrompt","handleAuthorizeDriveModal","getGrantedScopes","grantedScopes","includes","signInWithGoogle","handleCheckForDifferentUsers","GoogleAuth","id","isSignedIn","Promise","res","rej","load","callback","onerror","discoveryDocs","scope","PickerFolder","authUser","PickerWidget","loadPicker","createPicker","oauthToken","myDriveView","google","picker","DocsView","ViewId","FOLDERS","setLabel","setOwnedByMe","setIncludeFolders","setSelectFolderEnabled","PickerBuilder","addView","setDeveloperKey","setCallback","data","pickerCallback","enableFeature","Feature","SUPPORT_DRIVES","setTitle","build","setVisible","Response","ACTION","Action","PICKED","folder","DOCUMENTS","url","script","document","createElement","src","onload","appendChild","drawOnCanvas","width","height","canvas","getElementById","ctx","getContext","baseImage","Image","drawImage","uploadToDriveForPickerFolder","folderId","metadata","name","mimeType","parents","b64Data","split","blob","b64toBlob","form","FormData","append","Blob","stringify","type","alert","uploadDriveForPicker","contentType","byteCharacters","atob","byteArrays","byteNumbers","Array","length","i","charCodeAt","byteArray","Uint8Array","push","useGDrive","location","useLocation","useHistory","useEffect","searchParams","URLSearchParams","search","has","state","integrationType","stateKeys","Object","keys","isUserId","isAction","isIds","isExportIds","isFolderId","action","getDriveUiIntegrationType","userId","user","ids","imageMediaMetadata","Button","useState","setScopes","handleGrantedScopesClick","filter","val","onClick","shareDrive","signOutGoogle","map","Main","Router","exact","path","component","App","className","ReactDOM","render"],"mappings":"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","file":"static/js/main.6791cfb1.chunk.js","sourcesContent":["// scripts\nexport const GOOGLE_API_CLIENT_API_SCRIPT_URL = 'https://apis.google.com/js/api.js';\n\n// URLs\nexport const DRIVE_MULTIPART_UPLOAD_URL = 'https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id';\n\n// configs\nexport const API_KEY = 'AIzaSyDy6SRTXKsQx4TlXzxWw1LcN7OwiwwgtQM';\nexport const CLIENT_ID = '797908848155-g3s0vkl72b2hflvrq6mcq3et891evoim.apps.googleusercontent.com';\nconst DRIVE_API_DISCOVERY_DOCUMENT = 'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'\n\nexport const DISCOVERY_URLS = [\n  DRIVE_API_DISCOVERY_DOCUMENT,\n];\nexport const DRIVE_API_SCOPES = {\n  recommended: {\n    // appdata: 'https://www.googleapis.com/auth/drive.appdata',\n    file: 'https://www.googleapis.com/auth/drive.file',\n    install: 'https://www.googleapis.com/auth/drive.install',\n  },\n  // sensitive: {\n  //   appsReadOnly: 'https://www.googleapis.com/auth/drive.apps.readonly',\n  // },\n  // restricted: {\n  //   metadata: 'https://www.googleapis.com/auth/drive.metadata',\n  //   readonly: 'https://www.googleapis.com/auth/drive.readonly',\n  //   metadataReadonly: 'https://www.googleapis.com/auth/drive.metadata.readonly',\n  //   full: 'https://www.googleapis.com/auth/drive',\n  //   activity: 'https://www.googleapis.com/auth/drive.activity',\n  //   activityReadonly: 'https://www.googleapis.com/auth/drive.activity.readonly',\n  //   scripts: 'https://www.googleapis.com/auth/drive.scripts',\n  // },\n};\n\nexport const SCOPES = [\n  DRIVE_API_SCOPES.recommended.file,\n  DRIVE_API_SCOPES.recommended.install,\n].join(' ');\n\n// string names\nexport const DRIVE_UI_INTEGRATION_TYPES = {\n  openWithAppSpecificDocument: 'openWithAppSpecificDocument',\n  openWithGoogleWorkspaceDocument: 'openWithGoogleWorkspaceDocument',\n  newButton: 'newButton',\n};\n\n// paths\nexport const REDIRECT_URLS = {\n  chooser: '/chooser',\n  photo: '/editor?category=photos',\n}","import {\n  DRIVE_MULTIPART_UPLOAD_URL,\n  // DRIVE_API_FILE_SEARCH_PICSART_ROOT_FOLDER_QUERY,\n  // DRIVE_API_FILE_RESOURCE_FIELDS,\n} from './constants';\n\nconst DriveApiV3 = {\n  userIdFromDrive: null,\n  openWithState: null,\n  newButtonState: null,\n  // driveActiveImageId: null,\n  imgOptions: null,\n\n  async getImageById(fileId) {\n    try {\n      const response = await gapi.client.drive.files.get({\n        fileId,\n        alt: 'media',\n        fields: 'id, name',\n      });\n      return `data:${response.headers['Content-Type']};base64, ${btoa(response.body)}`\n    } catch (error) {\n      console.log(error) \n    }\n  },\n\n  async getFileFields({fileId, fields}) {\n    try {\n      const response = await gapi.client.drive.files.get({\n        fileId,\n        fields,\n      });\n      const result = await JSON.parse(response.body);\n      return result;\n    } catch (error) {\n      console.log(error)\n    }\n  },\n\n  async uploadFile(body) {\n    try {\n      const reponse = await fetch(DRIVE_MULTIPART_UPLOAD_URL, {\n        method: 'POST',\n        headers: new Headers({ Authorization: `Bearer ${gapi.auth.getToken().access_token}` }),\n        body,\n      });\n      const result = await reponse.json();\n      return result;\n    } catch (error) {\n      console.log(error)\n    }\n  },\n\n  // createFile({ resource, fields }) {\n  //   return (\n  //     gapi.client.drive.files.create({\n  //       resource,\n  //       fields,\n  //     })\n  //       .then(res => {\n  //         console.log(res);\n  //         const reso = JSON.parse(res.body);\n  //         console.log(reso);\n  //         const { files } = JSON.parse(res.body);\n  //         console.log(files);\n  //         return files || reso;\n  //       })\n  //       .catch(err => console.error(err))\n  //   );\n  // },\n};\n\nexport default DriveApiV3;\n\n// const token = gapi.auth.getToken().access_token;\n// fetch('https://appsmarket.googleapis.com/appsmarket/v2/customerLicense/58948318321/117831644331788887278', {\n//   headers: new Headers({ Authorization: `Bearer ${token}` }),\n// })\n//   .then(res => res.json())\n//   .catch(err => {\n//     console.error(err);\n//   })","import {\n  API_KEY,\n  CLIENT_ID,\n  DISCOVERY_URLS,\n  SCOPES,\n  GOOGLE_API_CLIENT_API_SCRIPT_URL,\n  DRIVE_API_SCOPES,\n} from './constants';\nimport { addScript } from './helpers';\nimport DriveApiV3 from './driveApiV3';\n\nclass GapiClient {\n  constructor(apiKey, clientId, discoverUrls, scopes) {\n    GapiClient.apiKey = apiKey;\n    GapiClient.clientId = clientId;\n    GapiClient.discoverUrls = discoverUrls;\n    GapiClient.scopes = scopes;\n  }\n\n  async init() {\n    console.log('gapi check');\n    if (window.gapi) {\n      return;\n    }\n    console.log('gapi init');\n    try {\n      await addScript(GOOGLE_API_CLIENT_API_SCRIPT_URL);\n      await GapiClient.loadClient();\n      console.log('after load clint')\n      await GapiClient.initClient();\n      console.log('after init client')\n      return gapi;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  static loadClient() {\n    return new Promise((res, rej) => {\n      gapi.load('client:auth2', { callback: res, onerror: rej });\n    });\n  }\n\n  static loadDriveShare() {\n    return new Promise((res, rej) => {\n      gapi.load('drive-share', { callback: res, onerror: rej });\n    });\n  }\n\n  static initClient() {\n    return (\n      gapi.client.init({\n        apiKey: GapiClient.apiKey,\n        clientId: GapiClient.clientId,\n        discoveryDocs: GapiClient.discoverUrls,\n        scope: GapiClient.scopes,\n      })\n    );\n  }\n\n  async signInWithGoogle() {\n    await this.init();\n    // need i disconnect every time or i can move it int signinpromt\n    // await this.revokeAccess();\n    try {\n      const currentUser = await gapi.auth2.getAuthInstance().signIn();\n      return currentUser;\n    } catch (error) {\n      // error case: when user closes sign in prompt\n      console.log(error);\n      return null;\n    }\n  }\n\n  async signOutGoogle() {\n    await this.init();\n    gapi.auth2.getAuthInstance().signOut();\n  }\n\n  async revokeAccess() {\n    console.log('revokeAccess')\n    await this.init();\n    gapi.auth2.getAuthInstance().disconnect();\n  }\n\n  async shareDrive(resetProgressCallback) {\n    // console.log('shareDrive');\n    await this.init();\n    await GapiClient.loadDriveShare();\n    const token = gapi.auth.getToken().access_token;\n    const s = await new gapi.drive.share.ShareClient();\n    s.setOAuthToken(token);\n    s.setItemIds(this.driveActiveImageId);\n    s.showSettingsDialog();\n    this.driveActiveImageId = null;\n    resetProgressCallback();\n  }\n\n  async handleCheckForDifferentUsers(currentUser) {\n    // console.log(currentUser, DriveApiV3.userIdFromDrive)\n    if (currentUser.getId() === DriveApiV3.userIdFromDrive) {\n      return this.handleCheckGorGrantedScopes(currentUser)\n    }\n\n    await this.revokeAccess()\n    // eslint-disable-next-line\n    const isAnswer = confirm(`Your signed account ${currentUser.getBasicProfile().getEmail()} is not match with drive account, choose oter account`);\n\n    if (isAnswer) {\n      return this.handleSignInPrompt()\n    }\n    \n    return this.handleAuthorizeDriveModal();\n  }\n\n  async getGrantedScopes() {\n    await GapiClient.init()\n    return gapi.auth2.getAuthInstance().currentUser.get().getGrantedScopes()\n  }\n\n  handleCheckGorGrantedScopes(currentUser) {\n    // need refactor\n    const grantedScopes = currentUser.getGrantedScopes();\n    const { recommended: { file, install } } = DRIVE_API_SCOPES;\n    if (grantedScopes.includes(file) && grantedScopes.includes(install)) {\n      return currentUser\n    }\n\n    return this.handleAuthorizeDriveModal();\n  }\n\n  async handleSignInPrompt() {\n    await this.revokeAccess();\n    const currentUser = await this.signInWithGoogle();\n    if (currentUser) {\n      return this.handleCheckForDifferentUsers(currentUser)\n    }\n\n    return this.handleAuthorizeDriveModal();\n  }\n\n  handleAuthorizeDriveModal() {\n    // eslint-disable-next-line\n    const isAnswer = confirm('Authorize Drive');\n    if (isAnswer) {\n      return this.handleSignInPrompt();\n    }\n    // currentUser is null\n    return null\n  }\n\n  async authUser() {\n    await this.init();\n\n    // GoogleAuth can be null when gapi not corrected was init;\n    const GoogleAuth = gapi.auth2.getAuthInstance();\n\n    // console.log(GoogleAuth.currentUser.get())\n\n    // id is null when app signin with google only https://myaccount.google.com/permissions\n    const id = gapi.auth2.getAuthInstance().currentUser.get().getId()\n    console.log(id)\n\n    if (GoogleAuth.isSignedIn.get()) {\n      return this.handleCheckForDifferentUsers(GoogleAuth.currentUser.get());\n    }\n    return this.handleAuthorizeDriveModal();\n  }\n}\n\nconst Gapi = new GapiClient(API_KEY, CLIENT_ID, DISCOVERY_URLS, SCOPES);\n\nexport default Gapi;\n","import { API_KEY } from './constants';\nimport Gapi from './gapi';\n\nclass PickerWidget {\n  async init(callback) {\n    const currentUser = await Gapi.authUser();\n    if (!currentUser) return\n    console.log('initPicker');\n    await PickerWidget.loadPicker();\n    await PickerWidget.createPicker(callback);\n    console.log('picker created');\n  }\n\n  static loadPicker() {\n    return new Promise((res, rej) => {\n      gapi.load('picker', { callback: res, onerror: rej });\n    });\n  }\n\n  static async createPicker(callback) {\n    console.log(callback);\n    const oauthToken = gapi.auth.getToken().access_token;\n\n    const myDriveView = new google.picker.DocsView(google.picker.ViewId.FOLDERS)\n      .setLabel('My Drive')\n      .setOwnedByMe(true)\n      .setIncludeFolders(true)\n      .setSelectFolderEnabled(true);\n\n    // const sharedDriveView = new google.picker.DocsView(google.picker.ViewId.FOLDERS)\n    //   .setEnableDrives(true)\n    //   .setIncludeFolders(true)\n    //   .setSelectFolderEnabled(true);\n\n    // const sharedWithMeView = new google.picker.DocsView(google.picker.ViewId.FOLDERS)\n    //   .setLabel('Shared with Me')\n    //   .setOwnedByMe(false)\n    //   .setIncludeFolders(true)\n    //   .setSelectFolderEnabled(true);\n\n    // const starredView = new google.picker.DocsView(google.picker.ViewId.FOLDERS)\n    //   .setLabel('Starred')\n    //   .setStarred(true)\n    //   .setIncludeFolders(true)\n    //   .setSelectFolderEnabled(true);\n\n    const picker = new google.picker.PickerBuilder()\n      .addView(myDriveView)\n      // .addView(sharedDriveView)\n      // .addView(sharedWithMeView)\n      // .addView(starredView)\n      .setOAuthToken(oauthToken)\n      .setDeveloperKey(API_KEY)\n      .setCallback(data => PickerWidget.pickerCallback(data, callback))\n      .enableFeature(google.picker.Feature.SUPPORT_DRIVES)\n      .setTitle('Pick a folder')\n      .build();\n    picker.setVisible(true);\n  }\n\n  static async pickerCallback(data, callback) {\n    console.log(data)\n    if (data[google.picker.Response.ACTION] === google.picker.Action.PICKED) {\n      const folder = data[google.picker.Response.DOCUMENTS][0];\n      console.log(folder)\n      callback(folder.id)\n    }\n  }\n}\n\nconst PickerFolder = new PickerWidget();\n\nexport default PickerFolder;\n\n\n\n// class Person {\n//   static async create () {\n//       return new Promise((res, rej) => {\n//           setTimeout(() => res(console.log(‘created’)), 2000)\n//       })\n//   }\n// }\n// var newInstance = await Person.create();\n// console.log(‘>>>’);","// import { getImgBlobAndSave } from 'utils';\n// import { getPdfBlobAndSave } from 'components/common/DownloadDropdown/download';\n\nimport DriveApiV3 from './driveApiV3';\nimport { DRIVE_UI_INTEGRATION_TYPES } from './constants';\nimport PickerFolder from './pickerApi';\nimport Gapi from './gapi';\n\nexport const addScript = url => new Promise(res => {\n  const script = document.createElement('script');\n  script.src = url;\n  script.onload = () => {\n    res();\n  };\n  document.body.appendChild(script);\n});\n\nexport const getDriveUiIntegrationType = state => {\n  const stateKeys = Object.keys(state);\n\n  const isUserId = stateKeys.includes('userId');\n  const isAction = stateKeys.includes('action');\n  const isIds = stateKeys.includes('ids');\n  const isExportIds = stateKeys.includes('exportIds');\n  const isFolderId = stateKeys.includes('folderId');\n  // const isResourceKeys = stateKeys.includes('resourceKeys');\n  // const isFolderResourceKey = stateKeys.includes('folderResourceKey');\n\n  /* userId and action are general for Open with and New button actions,\n    ids are for handling an Open with for an app-specific document,\n    exportIds are for handling an Open with for a Google Workspace document,\n    folderId is for handling a New URL */\n\n  if (isUserId && isAction && isIds && state.action === 'open') {\n    return DRIVE_UI_INTEGRATION_TYPES.openWithAppSpecificDocument;\n  }\n  if (isUserId && isAction && isExportIds && state.action === 'open') {\n    return DRIVE_UI_INTEGRATION_TYPES.openWithGoogleWorkspaceDocument;\n  }\n  if (isUserId && isAction && isFolderId && state.action === 'create') {\n    return DRIVE_UI_INTEGRATION_TYPES.newButton;\n  }\n};\n\n// export const getImageSize = src => new Promise(res => {\n//   const image = new Image();\n//   image.src = src;\n//   image.onload = () => {\n//     const { width, height } = image;\n//     res({ width, height });\n//   };\n// });\n\n// export const rgbColor1To255 = colorObj => {\n//   const colorObj255 = {};\n//   Object.entries(colorObj)\n//     .map(color => [color[0], Math.round(color[1] * 255)])\n//     .forEach(([name, value]) => colorObj255[name] = value);\n//   return colorObj255;\n// };\n\nexport const drawOnCanvas = async ({width, height, src}) => {\n  const canvas = document.getElementById('myCanvas');\n  const ctx = canvas.getContext('2d');\n  const baseImage = new Image();\n  baseImage.src = src;\n  baseImage.onload = () => {\n    canvas.width = width / 7;\n    canvas.height = height / 7;\n    ctx.drawImage(baseImage, 0, 0);\n  };\n};\n\nexport const handleDriveUpload = async ({\n  baseGroup,\n  upscale,\n  fileImgName,\n  qualityValue,\n  type,\n  originalWidth,\n  originalHeight,\n  isPdf,\n  isDownload,\n}, parents) => {\n  const upscaleSize = upscale ? upscale === 'x2' ? 2 : 4 : undefined;\n  const blob = isPdf\n    ? await getPdfBlobAndSave({\n      baseGroup, originalWidth, originalHeight, fileImgName, qualityValue, type, upscaleSize,\n    })\n    : await getImgBlobAndSave({\n      baseGroup, originalWidth, originalHeight, fileImgName, qualityValue, type, isDownload, upscaleSize,\n    });\n\n  console.log(blob);\n  const metadata = {\n    name: fileImgName,\n    mimeType: type,\n    parents,\n  };\n  console.log(metadata);\n  const form = new FormData();\n  form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));\n  form.append('file', blob);\n\n  console.log(form);\n\n  const res = await DriveApiV3.uploadFile(form);\n\n  Gapi.driveActiveImageId = res.id;\n};\n\nexport const uploadToDriveForPickerFolder = async (folderId) => {\n  const metadata = {\n    name: '0000emptyfile',\n    mimeType: DriveApiV3.imgOptions.mimeType,\n    parents: [folderId],\n  };\n  console.log(metadata);\n  const b64Data = DriveApiV3.imgOptions.src.split(',')[1]\n  const blob = b64toBlob(b64Data, DriveApiV3.imgOptions.mimeType);\n  const form = new FormData();\n  form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));\n  form.append('file', blob);\n\n  console.log(form);\n\n  const res = await DriveApiV3.uploadFile(form);\n  console.log(res)\n  alert('Image Saved');\n};\n\nexport const uploadDriveForPicker = async () => {\n  PickerFolder.init(uploadToDriveForPickerFolder);\n};\n\n\nconst b64toBlob = (b64Data, contentType) => {\n  const byteCharacters = atob(b64Data);\n  const byteArrays = [];\n\n  const byteNumbers = new Array(byteCharacters.length);\n  for (let i = 0; i < byteCharacters.length; i++) {\n    byteNumbers[i] = byteCharacters.charCodeAt(i);\n  }\n\n  const byteArray = new Uint8Array(byteNumbers);\n  byteArrays.push(byteArray);\n\n  const blob = new Blob(byteArrays, {type: contentType});\n  return blob;\n}\n","import { useEffect } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n// import { useDispatch } from 'react-redux';\n\n// import canvas from 'store/canvas';\nimport { uploadToDriveForPickerFolder } from '../gDrive/helpers';\n\nimport {\n  getDriveUiIntegrationType,\n  drawOnCanvas,\n} from './helpers';\nimport DriveApiV3 from './driveApiV3';\nimport { DRIVE_UI_INTEGRATION_TYPES, REDIRECT_URLS } from './constants';\nimport Gapi from './gapi';\n\nconst useGDrive = () => {\n  console.log('useGDrive');\n  const location = useLocation();\n  const history = useHistory();\n  // const dispatch = useDispatch();\n\n  useEffect(() => {\n    console.log('useGDrive eff');\n\n    const searchParams = new URLSearchParams(location.search);\n\n    if (!searchParams.has('state')) {\n      return null;\n    }\n\n    const state = JSON.parse(searchParams.get('state'));\n    \n    console.log(state);\n    \n    const integrationType = getDriveUiIntegrationType(state);\n\n    console.log(integrationType);\n\n    if (!integrationType) {\n      // history.replace(REDIRECT_URLS.chooser);\n      return\n    }\n\n    // sessionStorage.setItem('editor');\n\n    (async () => {\n      await Gapi.init();\n      console.log('after init')\n      DriveApiV3.userIdFromDrive = state.userId\n      const user = await Gapi.authUser();\n\n      console.log(user)\n\n      if (!user) {\n        // history.replace(REDIRECT_URLS.photo);\n        return;\n      }\n\n      if (integrationType === DRIVE_UI_INTEGRATION_TYPES.openWithAppSpecificDocument) {\n        DriveApiV3.openWithState = state;\n        const id = DriveApiV3.openWithState.ids[0]\n        const fields = await DriveApiV3.getFileFields({ fileId: id, fields: 'imageMediaMetadata, mimeType'});\n\n        if (!fields) {\n          return\n        }\n        console.log(fields)\n        // case filed error\n        const { imageMediaMetadata: { width, height }, mimeType } = fields;\n        const src = await DriveApiV3.getImageById(id);\n\n        DriveApiV3.imgOptions = { src, mimeType, width, height };\n        // dispatch(canvas.actions.setBlankCanvasSettings({\n        //   blank: true,\n        //   width,\n        //   height,\n        // }));\n        // history.replace(`/editor?customSize=${width}x${height}&unit=px&category=photos`);\n        drawOnCanvas(DriveApiV3.imgOptions);\n        return;\n      }\n\n      if (integrationType === DRIVE_UI_INTEGRATION_TYPES.openWithGoogleWorkspaceDocument) {\n        return\n      }\n\n      if (integrationType === DRIVE_UI_INTEGRATION_TYPES.newButton) {\n        DriveApiV3.newButtonState = state\n        uploadToDriveForPickerFolder(state.folderId)\n        return\n      }\n      //\n    })();\n  });\n};\n\nexport default useGDrive;\n","import { useState } from \"react\";\nimport { Gapi, uploadDriveForPicker } from \"../gDrive\";\n\nconst Button = () => {\n    const [scopes, setScopes] = useState([]);\n\n    console.log(Gapi);\n\n    const handleShareDriveClick = () => {\n        Gapi.shareDrive()\n    }\n    \n    const handleAuthClick = () => {\n        Gapi.authUser();\n    }\n    \n    const handleUploadClick = () => {\n        uploadDriveForPicker()\n    }\n\n    const handleSignInClick = () => {\n        Gapi.signInWithGoogle()\n    }\n\n    const handleSignOutClick = () => {\n        Gapi.signOutGoogle()\n    }\n\n    const handleRevokeAccessClick = () => {\n        Gapi.revokeAccess()\n    }\n\n    const handleGrantedScopesClick = async () => {\n        const scopes = await Gapi.getGrantedScopes();\n        setScopes(scopes.split(' ').filter(val => val.includes('auth')))\n    };\n\n\n    return (\n        <>\n            <div>\n                <button onClick={handleShareDriveClick}>Share Drive</button>\n                <button onClick={handleAuthClick}>Authorize</button>\n                <button onClick={handleUploadClick}>upload</button>\n                <button onClick={handleSignInClick}>signIn</button>\n                <button onClick={handleSignOutClick}>signOut</button>\n                <button onClick={handleRevokeAccessClick}>revoke access</button>\n                <button onClick={handleGrantedScopesClick}>see granted scopes</button>\n            </div>\n            {scopes.map(scope => <p key={scope}>{scope}</p>)}\n            <div>\n                <canvas id=\"myCanvas\"></canvas>\n            </div>\n            {/* <img id=\"driveImg\" src=\"\" alt=\"img\"/> */}\n        </>\n    )\n}\n\nexport default Button\n","import { Switch, Route } from 'react-router-dom';\nimport Button from './components/button';\nimport { useGDrive } from './gDrive';\n\nconst Main = () => <div>hi</div>;\n\n\nconst Router = () => {\n  console.log('aa')\n    useGDrive();\n\n    return (\n      <div>\n        <Button/>\n        {/* <Code/> */}\n        <Switch>\n          <Route exact path=\"/\" component={Main} />\n        </Switch>\n      </div>\n    );\n  };\n  export default Router;","import { BrowserRouter } from 'react-router-dom';\nimport Router from './Routes';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Router/>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}