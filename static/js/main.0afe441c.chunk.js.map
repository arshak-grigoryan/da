{"version":3,"sources":["gDrive/constants.js","gDrive/driveApiV3.js","gDrive/pickerApi.js","gDrive/utils.js","gDrive/gapi.js","gDrive/helpers.js","gDrive/hooks.js","components/button.jsx","Routes.js","App.js","index.js"],"names":["API_KEY","DISCOVERY_URLS","DRIVE_API_SCOPES","recommended","appdata","file","install","SCOPES","join","DRIVE_UI_INTEGRATION_TYPES","openWithAppSpecificDocument","DriveApiV3","getImageById","fileId","gapi","client","drive","files","get","alt","supportsAllDrives","fields","then","res","a","console","log","mimeType","headers","src","btoa","body","catch","err","error","getFileFields","JSON","parse","getAbout","about","uploadFile","fetch","method","Headers","Authorization","auth","getToken","access_token","json","createFile","resource","create","reso","Picker","uploadCallback","imgSettings","PickerWidget","handlePickerLoad","createPicker","Promise","rej","load","callback","onerror","oauthToken","myDriveView","google","picker","DocsView","ViewId","FOLDERS","setLabel","setOwnedByMe","setIncludeFolders","setSelectFolderEnabled","sharedDriveView","setEnableDrives","sharedWithMeView","starredView","setStarred","PickerBuilder","addView","setOAuthToken","setDeveloperKey","setCallback","d","pickerCallback","enableFeature","Feature","SUPPORT_DRIVES","setTitle","build","setVisible","data","cb","Response","ACTION","Action","PICKED","folder","DOCUMENTS","id","addScript","url","script","document","createElement","onload","appendChild","Gapi","this","openWithState","driveActiveImageId","imgOptions","window","GapiBrowserLibrary","loadClient","initClient","init","auth2","getAuthInstance","signIn","currentUser","signOut","resetProgressCallback","loadDriveShare","token","share","ShareClient","s","setItemIds","showSettingsDialog","userIdFromDrive","GoogleAuth","isSignedIn","grantedScopes","getGrantedScopes","isSameId","getId","handleAuthorizeDriveModal","signInWithGoogle","isSameUser","disconnect","isUserAcceptedNewSigninFlow","confirm","alert","apiKey","clientId","discoveryDocs","scope","id1","id2","addSrcToCanvas","imageSrc","canvas","getElementById","ctx","getContext","getImageSize","width","height","baseImage","Image","drawImage","handleDriveUpload","parents","baseGroup","upscale","fileImgName","qualityValue","type","originalWidth","originalHeight","isPdf","isDownload","upscaleSize","undefined","getPdfBlobAndSave","getImgBlobAndSave","blob","metadata","name","form","FormData","append","Blob","stringify","handlDriveUploadForPicker","authUser","parentsResp","useGDrive","location","useLocation","history","useHistory","useEffect","search","searchParams","URLSearchParams","has","state","integrationType","stateKeys","Object","keys","isUserId","includes","isAction","isIds","isExportIds","isFolderId","openWithGoogleWorkspaceDocument","newButton","getDriveUiIntegrationType","replace","userId","user","ids","fileParents","folderPermissions","filePermissions","imageMediaMetadata","Button","onClick","shareDrive","uploadDrive","signOutGoogle","Main","Code","Router","exact","path","component","App","className","ReactDOM","render"],"mappings":"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","file":"static/js/main.0afe441c.chunk.js","sourcesContent":["// scripts\nexport const GOOGLE_API_CLIENT_API_SCRIPT_URL = 'https://apis.google.com/js/api.js';\n\n// URLs\nexport const DRIVE_MULTIPART_UPLOAD_URL = 'https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id';\n\n// configs\nexport const API_KEY = 'AIzaSyAuVXgAR4aI47Fxg4ztfBpLpb_IafzKsMY';\nexport const CLIENT_ID = '58948318321-knaasj1fie9mmvd715621ua0f7drspkd.apps.googleusercontent.com';\nconst DRIVE_API_DISCOVERY_DOCUMENT = 'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'\nconst MARKETPLACE_API_DISCOVERY_DOCUMENT = 'https://appsmarket.googleapis.com/$discovery/rest?version=v2';\n\nexport const DISCOVERY_URLS = [\n  DRIVE_API_DISCOVERY_DOCUMENT,\n  MARKETPLACE_API_DISCOVERY_DOCUMENT\n];\nconst DRIVE_API_SCOPES = {\n  recommended: {\n    appdata: 'https://www.googleapis.com/auth/drive.appdata',\n    file: 'https://www.googleapis.com/auth/drive.file',\n    install: 'https://www.googleapis.com/auth/drive.install',\n  },\n  // sensitive: {\n  //   appsReadOnly: 'https://www.googleapis.com/auth/drive.apps.readonly',\n  // },\n  // restricted: {\n  //   metadata: 'https://www.googleapis.com/auth/drive.metadata',\n  //   full: 'https://www.googleapis.com/auth/drive',\n  //   activity: 'https://www.googleapis.com/auth/drive.activity',\n  //   activityReadonly: 'https://www.googleapis.com/auth/drive.activity.readonly',\n  //   readonly: 'https://www.googleapis.com/auth/drive.readonly',\n  //   metadataReadonly: 'https://www.googleapis.com/auth/drive.metadata.readonly',\n  //   scripts: 'https://www.googleapis.com/auth/drive.scripts',\n  // },\n};\n\nexport const SCOPES = [\n  DRIVE_API_SCOPES.recommended.appdata,\n  DRIVE_API_SCOPES.recommended.file,\n  DRIVE_API_SCOPES.recommended.install,\n  'https://www.googleapis.com/auth/appsmarketplace.license'\n  // DRIVE_API_SCOPES.sensitive.appsReadOnly,\n  // DRIVE_API_SCOPES.restricted.metadata,\n  // DRIVE_API_SCOPES.restricted.full,\n  // DRIVE_API_SCOPES.restricted.activity,\n  // DRIVE_API_SCOPES.restricted.activityReadonly,\n  // DRIVE_API_SCOPES.restricted.readonly,\n  // DRIVE_API_SCOPES.restricted.metadataReadonly,\n  // DRIVE_API_SCOPES.restricted.scripts,\n].join(' ');\n\n// string names\nexport const DRIVE_UI_INTEGRATION_TYPES = {\n  openWithAppSpecificDocument: 'openWithAppSpecificDocument',\n  // openWithGoogleWorkspaceDocument: 'openWithGoogleWorkspaceDocument',\n  // newButton: 'newButton',\n};\n\n// drive API\n// export const DRIVE_API_FILE_SEARCH_PICSART_ROOT_FOLDER_QUERY = '\"root\" in parents and mimeType = \"application/vnd.google-apps.folder\" and name = \"PicsArt\" and trashed = false';\n// export const DRIVE_API_FILE_RESOURCE_FIELDS = 'nextPageToken, files(id, name)';\nexport const DRIVE_API_FIELDS = {\n  about: {\n    storageQuota: 'storageQuota',\n  }\n}","import {\n  DRIVE_MULTIPART_UPLOAD_URL,\n  // DRIVE_API_FILE_SEARCH_PICSART_ROOT_FOLDER_QUERY,\n  // DRIVE_API_FILE_RESOURCE_FIELDS,\n} from './constants';\n\nconst DriveApiV3 = {\n  getImageById(fileId) {\n    return (\n      gapi.client.drive.files.get({\n        fileId,\n        alt: 'media',\n        supportsAllDrives: true,\n        fields: 'id, name',\n      })\n        .then(async res => {\n          console.log(res)\n          const mimeType = res.headers['Content-Type'];\n          const src = `data:${mimeType};base64, ${btoa(res.body)}`;\n          return { src, mimeType };\n        })\n        .catch(err => console.error(err))\n    );\n  },\n\n  getFileFields({fileId, fields}) {\n    return (\n      gapi.client.drive.files.get({\n        fileId,\n        fields,\n        supportsAllDrives: true,\n      })\n        .then(res => JSON.parse(res.body))\n        .catch(err => console.error(err))\n    );\n  },\n\n  getAbout(fields) {\n    return (\n      gapi.client.drive.about.get({\n        fields,\n      })\n        .then(res => JSON.parse(res.body))\n        .catch(err => console.error(err))\n    );\n  },\n\n  // getFileParents({ fileId, fields }) {\n  //   return (\n  //     gapi.client.drive.files.get({\n  //       fileId,\n  //       fields,\n  //       supportsAllDrives: true,\n  //     })\n  //       .then(res => JSON.parse(res.body))\n  //       .catch(err => console.error(err))\n  //   );\n  // },\n\n  // getFilePermissions(fileId) {\n  //   return (\n  //     gapi.client.drive.files.get({\n  //       fileId,\n  //       fields: 'permissions',\n  //       supportsAllDrives: true,\n  //     })\n  //       .then(res => JSON.parse(res.body))\n  //       .catch(err => console.error(err))\n  //   );\n  // },\n\n  uploadFile(body) {\n    // need add supportsAllDrives: true param\n    return (\n      fetch(DRIVE_MULTIPART_UPLOAD_URL, {\n        method: 'POST',\n        headers: new Headers({ Authorization: `Bearer ${gapi.auth.getToken().access_token}` }),\n        body,\n      })\n        .then(res => res.json())\n        .catch(err => {\n          console.error(err);\n        })\n    );\n  },\n\n  // searchFiles({ q, fields }) {\n  //   return (\n  //     gapi.client.drive.files.list({\n  //       q,\n  //       fields,\n  //     })\n  //       .then(async res => {\n  //         const body = JSON.parse(res.body);\n  //         const { files } = body;\n  //         console.log(files);\n  //         return files;\n  //       })\n  //       .catch(err => console.error(err))\n  //   );\n  // },\n\n  createFile({ resource, fields }) {\n    return (\n      gapi.client.drive.files.create({\n        resource,\n        fields,\n      })\n        .then(res => {\n          console.log(res);\n          const reso = JSON.parse(res.body);\n          console.log(reso);\n          const { files } = JSON.parse(res.body);\n          console.log(files);\n          return files || reso;\n        })\n        .catch(err => console.error(err))\n    );\n  },\n};\n\nexport default DriveApiV3;\n\n// const token = gapi.auth.getToken().access_token;\n// fetch('https://appsmarket.googleapis.com/appsmarket/v2/customerLicense/58948318321/117831644331788887278', {\n//   headers: new Headers({ Authorization: `Bearer ${token}` }),\n// })\n//   .then(res => res.json())\n//   .catch(err => {\n//     console.error(err);\n//   })","import { API_KEY } from './constants';\n\nclass PickerWidget {\n  async init(uploadCallback, imgSettings) {\n    console.log('class');\n    console.log('initPicker');\n    await PickerWidget.handlePickerLoad();\n    await PickerWidget.createPicker(uploadCallback, imgSettings);\n    console.log('picker created');\n  }\n\n  static handlePickerLoad() {\n    return new Promise((res, rej) => {\n      gapi.load('picker', { callback: res, onerror: rej });\n    });\n  }\n\n  static async createPicker(uploadCallback, imgSettings) {\n    console.log(uploadCallback, imgSettings);\n    const oauthToken = gapi.auth.getToken().access_token;\n\n    const myDriveView = new google.picker.DocsView(google.picker.ViewId.FOLDERS)\n      .setLabel('My Drive')\n      .setOwnedByMe(true)\n      .setIncludeFolders(true)\n      .setSelectFolderEnabled(true);\n\n    const sharedDriveView = new google.picker.DocsView(google.picker.ViewId.FOLDERS)\n      .setEnableDrives(true)\n      .setIncludeFolders(true)\n      .setSelectFolderEnabled(true);\n\n    const sharedWithMeView = new google.picker.DocsView(google.picker.ViewId.FOLDERS)\n      .setLabel('Shared with Me')\n      .setOwnedByMe(false)\n      .setIncludeFolders(true)\n      .setSelectFolderEnabled(true);\n\n    const starredView = new google.picker.DocsView(google.picker.ViewId.FOLDERS)\n      .setLabel('Starred')\n      .setStarred(true)\n      .setIncludeFolders(true)\n      .setSelectFolderEnabled(true);\n\n    const picker = new google.picker.PickerBuilder()\n      .addView(myDriveView)\n      .addView(sharedDriveView)\n      .addView(sharedWithMeView)\n      .addView(starredView)\n      .setOAuthToken(oauthToken)\n      .setDeveloperKey(API_KEY)\n      .setCallback(d => PickerWidget.pickerCallback(d, uploadCallback, imgSettings))\n      .enableFeature(google.picker.Feature.SUPPORT_DRIVES)\n      .setTitle('Pick a folder')\n      .build();\n    picker.setVisible(true);\n  }\n\n  static pickerCallback(data, cb, imgSettings) {\n    console.log(data, cb, imgSettings);\n    if (data[google.picker.Response.ACTION] === google.picker.Action.PICKED) {\n      const folder = data[google.picker.Response.DOCUMENTS][0];\n      console.log(folder.id);\n      cb(imgSettings, [folder.id]);\n    }\n  }\n}\n\nconst Picker = new PickerWidget();\n\nexport default Picker;\n","// eslint-disable-next-line\nexport const addScript = url => new Promise(res => {\n  const script = document.createElement('script');\n  script.src = url;\n  script.onload = () => {\n    res();\n  };\n  document.body.appendChild(script);\n});\n","import { addScript } from './utils';\nimport {\n  API_KEY,\n  CLIENT_ID,\n  DISCOVERY_URLS,\n  SCOPES,\n  GOOGLE_API_CLIENT_API_SCRIPT_URL,\n} from './constants';\nimport { handleAuthorizeDriveModal, isSameId } from './helpers';\n\nclass GapiBrowserLibrary {\n  constructor() {\n    this.openWithState = null;\n    this.driveActiveImageId = null;\n    this.imgOptions = null;\n  }\n\n  async init() {\n    console.log('init');\n    if (window.gapi) {\n      return;\n    }\n    try {\n      await addScript(GOOGLE_API_CLIENT_API_SCRIPT_URL);\n      await GapiBrowserLibrary.loadClient();\n      await GapiBrowserLibrary.initClient();\n      return gapi;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  static loadClient() {\n    return new Promise((res, rej) => {\n      gapi.load('client:auth2', { callback: res, onerror: rej });\n    });\n  }\n\n  static loadDriveShare() {\n    return new Promise((res, rej) => {\n      gapi.load('drive-share', { callback: res, onerror: rej });\n    });\n  }\n\n  static initClient() {\n    return (\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_URLS,\n        scope: SCOPES,\n      })\n    );\n  }\n\n  async signInWithGoogle() {\n    await this.init();\n    try {\n      const currentUser = await gapi.auth2.getAuthInstance().signIn();\n      return currentUser;\n    } catch (error) {\n      // error case: when user closes sign in prompt\n      console.log(error);\n      return error;\n    }\n  }\n\n  async signOutGoogle() {\n    await this.init();\n    gapi.auth2.getAuthInstance().signOut();\n  }\n\n  async shareDrive(resetProgressCallback) {\n    console.log('shareDrive');\n    await this.init();\n    await GapiBrowserLibrary.loadDriveShare();\n    const token = gapi.auth.getToken().access_token;\n    const s = await new gapi.drive.share.ShareClient();\n    s.setOAuthToken(token);\n    s.setItemIds(this.driveActiveImageId);\n    s.showSettingsDialog();\n    this.driveActiveImageId = null;\n    resetProgressCallback();\n  }\n\n\n  async authUser(userIdFromDrive) {\n    await this.init();\n    console.log('userIdFromDrive', userIdFromDrive);\n    const GoogleAuth = gapi.auth2.getAuthInstance();\n\n    // console.log('isSignedIn', GoogleAuth.isSignedIn.get(), GoogleAuth.currentUser.get().getBasicProfile().getEmail());\n\n    if (GoogleAuth.isSignedIn.get()) {\n      const grantedScopes = GoogleAuth.currentUser.get().getGrantedScopes();\n      console.log(grantedScopes)\n      // check for scopes\n      if (userIdFromDrive) {\n        const isSameUser = isSameId(GoogleAuth.currentUser.get().getId(), userIdFromDrive);\n        if (isSameUser) {\n          console.log('already signin from drive and existing are same!!', userIdFromDrive);\n          return userIdFromDrive;\n        }\n        this.openWithState = null;\n        this.driveActiveImageId = null;\n        console.log('isSameUser is false');\n        console.log('signOut');\n        GoogleAuth.signOut();\n      } else {\n        console.log('userIdFromDrive is undefined');\n        return GoogleAuth.currentUser.get();\n      }\n    }\n\n    const res = handleAuthorizeDriveModal();\n    if (!res) return\n\n    const currentUser = await this.signInWithGoogle();\n\n    if (currentUser.error) {\n      // this.authUser();\n      console.log('currentUser.error')\n      this.openWithState = null;\n      this.driveActiveImageId = null;\n      return;\n    }\n    // const grantedScopes = currentUser\n    if (userIdFromDrive) {\n      const isSameUser = isSameId(currentUser.getId(), userIdFromDrive);\n      console.log('isSameUser', isSameUser);\n      if (!isSameUser) {\n        GoogleAuth.disconnect();\n        // eslint-disable-next-line\n        const isUserAcceptedNewSigninFlow = confirm(\"Drive account and choosed account doesn't match. Choose account again\");\n        if (isUserAcceptedNewSigninFlow) {\n          console.log('isUserAcceptedNewSigninFlow', isUserAcceptedNewSigninFlow);\n          // return handleAuthProcess(null, userIdFromDrive);\n        }\n        // eslint-disable-next-line\n        alert('Your state was lost');\n        return;\n      }\n      console.log('signin from drive first time');\n      return currentUser;\n    }\n    console.log('signin independent first time');\n    return currentUser;\n  }\n}\n\nconst Gapi = new GapiBrowserLibrary();\n\nexport default Gapi;\n","// import { getImgBlobAndSave } from 'utils';\n// import { getPdfBlobAndSave } from 'components/common/DownloadDropdown/download';\n\nimport DriveApiV3 from './driveApiV3';\nimport { DRIVE_UI_INTEGRATION_TYPES } from './constants';\nimport Picker from './pickerApi';\nimport Gapi from './gapi';\n\nexport const addScript = url => new Promise(res => {\n  const script = document.createElement('script');\n  script.src = url;\n  script.onload = () => {\n    res();\n  };\n  document.body.appendChild(script);\n});\n\nexport const isSameId = (id1, id2) => id1 === id2;\n\nexport const getDriveUiIntegrationType = state => {\n  const stateKeys = Object.keys(state);\n\n  const isUserId = stateKeys.includes('userId');\n  const isAction = stateKeys.includes('action');\n  const isIds = stateKeys.includes('ids');\n  const isExportIds = stateKeys.includes('exportIds');\n  const isFolderId = stateKeys.includes('folderId');\n  // const isResourceKeys = stateKeys.includes('resourceKeys');\n\n  /* userId and action are general for Open with and New button actions,\n    ids are for handling an Open with for an app-specific document,\n    exportIds are for handling an Open with for a Google Workspace document,\n    folderId is for handling a New URL */\n\n  if (isUserId && isAction && isIds) {\n    return DRIVE_UI_INTEGRATION_TYPES.openWithAppSpecificDocument;\n  }\n  if (isUserId && isAction && isExportIds) {\n    return DRIVE_UI_INTEGRATION_TYPES.openWithGoogleWorkspaceDocument;\n  }\n  if (isUserId && isAction && isFolderId) {\n    return DRIVE_UI_INTEGRATION_TYPES.newButton;\n  }\n};\n\n// export const getImageSize = src => new Promise(res => {\n//   const image = new Image();\n//   image.src = src;\n//   image.onload = () => {\n//     const { width, height } = image;\n//     res({ width, height });\n//   };\n// });\n\n// export const rgbColor1To255 = colorObj => {\n//   const colorObj255 = {};\n//   Object.entries(colorObj)\n//     .map(color => [color[0], Math.round(color[1] * 255)])\n//     .forEach(([name, value]) => colorObj255[name] = value);\n//   return colorObj255;\n// };\n\nexport const addSrcToCanvas = async imageSrc => {\n  const canvas = document.getElementById('myCanvas');\n  const ctx = canvas.getContext('2d');\n  const { width, height } = await getImageSize(imageSrc);\n  const baseImage = new Image();\n  baseImage.src = imageSrc;\n  baseImage.onload = () => {\n    canvas.width = width;\n    canvas.height = height;\n    ctx.drawImage(baseImage, 0, 0);\n  };\n};\n\nexport const handleDriveUpload = async ({\n  baseGroup,\n  upscale,\n  fileImgName,\n  qualityValue,\n  type,\n  originalWidth,\n  originalHeight,\n  isPdf,\n  isDownload,\n}, parents) => {\n  const upscaleSize = upscale ? upscale === 'x2' ? 2 : 4 : undefined;\n  const blob = isPdf\n    ? await getPdfBlobAndSave({\n      baseGroup, originalWidth, originalHeight, fileImgName, qualityValue, type, upscaleSize,\n    })\n    : await getImgBlobAndSave({\n      baseGroup, originalWidth, originalHeight, fileImgName, qualityValue, type, isDownload, upscaleSize,\n    });\n\n  console.log(blob);\n  const metadata = {\n    name: fileImgName,\n    mimeType: type,\n    parents,\n  };\n  console.log(metadata);\n  const form = new FormData();\n  form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));\n  form.append('file', blob);\n\n  console.log(form);\n\n  const res = await DriveApiV3.uploadFile(form);\n\n  Gapi.driveActiveImageId = res.id;\n};\n\nexport const handlDriveUploadForPicker = async imgSettings => {\n  await Gapi.authUser();\n  let parents;\n  // const drivefileId = Gapi.driveActiveImageId;\n  // only for test open picker\n  const drivefileId = undefined;\n  if (drivefileId) {\n    const parentsResp = await DriveApiV3.getFileParents({\n      fileId: drivefileId,\n      fields: 'parents, name',\n    });\n    parents = parentsResp.parents;\n    console.log('parnets', parents);\n    handleDriveUpload(imgSettings, parents);\n  } else {\n    console.log(' before  deletion');\n    Picker.init(handleDriveUpload, imgSettings);\n    console.log('parnets', parents);\n  }\n};\n\nexport const handleAuthorizeDriveModal = () => {\n  // eslint-disable-next-line\n  const answer = confirm('Authorization required');\n\n  return answer\n}","import { useEffect } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n// import { useDispatch } from 'react-redux';\n\n// import canvas from 'store/canvas';\n\nimport {\n  getDriveUiIntegrationType,\n  addSrcToCanvas,\n} from './helpers';\nimport DriveApiV3 from './driveApiV3';\nimport { DRIVE_UI_INTEGRATION_TYPES } from './constants';\nimport Gapi from './gapi';\n\nconst useGDrive = () => {\n  console.log('useGDrive');\n  const location = useLocation();\n  const history = useHistory();\n  // const dispatch = useDispatch();\n\n  useEffect(() => {\n    console.log('useGDrive eff');\n\n    console.log(location.search)\n    const searchParams = new URLSearchParams(location.search);\n\n    if (!searchParams.has('state')) {\n      return null;\n    }\n\n    console.log(searchParams);\n    const state = JSON.parse(searchParams.get('state'));\n\n    const integrationType = getDriveUiIntegrationType(state);\n\n    if (!integrationType) {\n      history.replace('/chooser');\n      return null;\n    }\n\n    (async () => {\n      await Gapi.init();\n\n      const user = await Gapi.authUser(state.userId);\n\n      console.log(user)\n      if (!user) {\n        history.replace('/editor?category=photos');\n        return;\n      }\n\n      if (integrationType === DRIVE_UI_INTEGRATION_TYPES.openWithAppSpecificDocument) {\n        Gapi.openWithState = state;\n        const [id] = state.ids;\n        const fileParents = await DriveApiV3.getFileFields({ fileId: id, fields: 'parents, name' });\n        console.log(fileParents);\n        const folderPermissions = await DriveApiV3.getFileFields({ fileId: fileParents.parents[0], fields: 'permissions' });\n        console.log(folderPermissions)\n        const filePermissions = await DriveApiV3.getFileFields({ fileId: id, fields: 'permissions' });\n        console.log(filePermissions);\n\n        Gapi.driveActiveImageId = id;\n        const fields = await DriveApiV3.getFileFields({ fileId: id, fields: '*'});\n        console.log(fields)\n        window.fields = fields\n        const { imageMediaMetadata: { width, height } } = fields;\n        const { src, mimeType } = await DriveApiV3.getImageById(id);\n\n        Gapi.imgOptions = { src, mimeType, width, height };\n        // dispatch(canvas.actions.setBlankCanvasSettings({\n        //   blank: true,\n        //   width,\n        //   height,\n        // }));\n        // history.replace(`/editor?customSize=${width}x${height}&unit=px&category=photos`);\n        addSrcToCanvas(Gapi.imgOptions.src);\n        return;\n      }\n\n      // if (integrationType === DRIVE_UI_INTEGRATION_TYPES.openWithGoogleWorkspaceDocument) {}\n\n      // if (integrationType === DRIVE_UI_INTEGRATION_TYPES.newButton) {}\n    })();\n  });\n};\n\nexport default useGDrive;\n","import { handlDriveUploadForPicker } from \"../gDrive\";\nimport { Gapi } from '../gDrive';\n\nconst Button = () => {\n    console.log(Gapi);\n\n    const handlePickerClick = () => {\n        const imgSettings = {};\n        handlDriveUploadForPicker(imgSettings);\n    }\n\n    const handleShareDriveClick = () => {\n        Gapi.shareDrive()\n    }\n    \n    const handleAuthClick = () => {\n        Gapi.authUser();\n    }\n    \n    const handleUploadClick = () => {\n        Gapi.uploadDrive()\n    }\n\n    const handleSignInClick = () => {\n        Gapi.signInWithGoogle()\n    }\n\n    const handleSignOutClick = () => {\n        Gapi.signOutGoogle()\n    }\n\n    return (\n        <>\n            <div>\n                <button onClick={handleShareDriveClick}>Share Drive</button>\n                <button onClick={handleAuthClick}>Authorize</button>\n                <button onClick={handleUploadClick}>upload</button>\n                <button onClick={handleSignInClick}>signIn</button>\n                <button onClick={handleSignOutClick}>signOut</button>\n                <button onClick={handlePickerClick}>open picker</button>\n            </div>\n            <div>\n                <canvas id=\"myCanvas\"></canvas>\n            </div>\n            {/* <img id=\"driveImg\" src=\"\" alt=\"img\"/> */}\n        </>\n    )\n}\n\nexport default Button\n","import { Switch, Route } from 'react-router-dom';\nimport Button from './components/button';\nimport { useGDrive } from './gDrive';\n\nconst Main = () => <div>hi</div>;\n\nconst Code = () => <pre>console.log('aaaaaaaaa')</pre>\n\nconst Router = () => {\n  console.log('aa')\n    useGDrive();\n\n    return (\n      <div>\n        <Button/>\n        <Code/>\n        <Switch>\n          <Route exact path=\"/\" component={Main} />\n          <Route exact path=\"/code\" component={Code} />\n        </Switch>\n      </div>\n    );\n  };\n  export default Router;","import { BrowserRouter } from 'react-router-dom';\nimport Router from './Routes';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Router/>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}