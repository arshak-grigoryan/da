{"version":3,"sources":["gDrive/constants.js","gDrive/driveApiV3.js","gDrive/gapi.js","gDrive/pickerApi.js","gDrive/helpers.js","gDrive/hooks.js","components/button.jsx","Routes.js","App.js","index.js"],"names":["API_KEY","DISCOVERY_URLS","DRIVE_API_SCOPES","recommended","file","install","SCOPES","join","DRIVE_UI_INTEGRATION_TYPES","REDIRECT_URLS","DriveApiV3","openWithState","newButtonState","imgOptions","getImageById","fileId","gapi","client","drive","files","get","alt","fields","response","headers","btoa","body","console","log","getFileFields","JSON","parse","result","uploadFile","fetch","method","Headers","Authorization","auth","getToken","access_token","reponse","json","Gapi","a","window","addScript","GapiClientLibrary","loadClient","initClient","this","init","auth2","getAuthInstance","signIn","currentUser","signOut","disconnect","resetProgressCallback","loadDriveShare","token","share","ShareClient","s","setOAuthToken","setItemIds","driveActiveImageId","showSettingsDialog","getGrantedScopes","userIdFromDrive","GoogleAuth","isSignedIn","grantedScopes","appdata","includes","isSameId","getId","handleAuthorizeDriveModal","signInWithGoogle","error","isSameUser","isUserAcceptedNewSigninFlow","confirm","alert","Promise","res","rej","load","callback","onerror","apiKey","clientId","discoveryDocs","scope","PickerFolder","authUser","PickerWidget","loadPicker","createPicker","oauthToken","myDriveView","google","picker","DocsView","ViewId","FOLDERS","setLabel","setOwnedByMe","setIncludeFolders","setSelectFolderEnabled","PickerBuilder","addView","setDeveloperKey","setCallback","data","pickerCallback","enableFeature","Feature","SUPPORT_DRIVES","setTitle","build","setVisible","Response","ACTION","Action","PICKED","folder","DOCUMENTS","id","url","script","document","createElement","src","onload","appendChild","id1","id2","drawOnCanvas","width","height","canvas","getElementById","ctx","getContext","baseImage","Image","drawImage","uploadToDriveForPickerFolder","folderId","metadata","name","mimeType","parents","b64Data","split","blob","b64toBlob","form","FormData","append","Blob","stringify","type","handlDriveUploadForPicker","imgSettings","contentType","byteCharacters","atob","byteArrays","byteNumbers","Array","length","i","charCodeAt","byteArray","Uint8Array","push","useGDrive","location","useLocation","history","useHistory","useEffect","searchParams","URLSearchParams","search","has","state","integrationType","stateKeys","Object","keys","isUserId","isAction","isIds","isExportIds","isFolderId","action","getDriveUiIntegrationType","userId","user","replace","ids","imageMediaMetadata","Button","useState","scopes","setScopes","handleGrantedScopesClick","filter","val","onClick","shareDrive","signOutGoogle","revokeAccess","map","Main","Code","Router","exact","path","component","App","className","ReactDOM","render"],"mappings":"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","file":"static/js/main.1e0a1488.chunk.js","sourcesContent":["// scripts\nexport const GOOGLE_API_CLIENT_API_SCRIPT_URL = 'https://apis.google.com/js/api.js';\n\n// URLs\nexport const DRIVE_MULTIPART_UPLOAD_URL = 'https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id';\n\n// configs\nexport const API_KEY = 'AIzaSyAuVXgAR4aI47Fxg4ztfBpLpb_IafzKsMY';\nexport const CLIENT_ID = '58948318321-knaasj1fie9mmvd715621ua0f7drspkd.apps.googleusercontent.com';\nconst DRIVE_API_DISCOVERY_DOCUMENT = 'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'\n\nexport const DISCOVERY_URLS = [\n  DRIVE_API_DISCOVERY_DOCUMENT,\n];\nexport const DRIVE_API_SCOPES = {\n  recommended: {\n    // appdata: 'https://www.googleapis.com/auth/drive.appdata',\n    file: 'https://www.googleapis.com/auth/drive.file',\n    install: 'https://www.googleapis.com/auth/drive.install',\n  },\n  // sensitive: {\n  //   appsReadOnly: 'https://www.googleapis.com/auth/drive.apps.readonly',\n  // },\n  // restricted: {\n  //   metadata: 'https://www.googleapis.com/auth/drive.metadata',\n  //   readonly: 'https://www.googleapis.com/auth/drive.readonly',\n  //   metadataReadonly: 'https://www.googleapis.com/auth/drive.metadata.readonly',\n  //   full: 'https://www.googleapis.com/auth/drive',\n  //   activity: 'https://www.googleapis.com/auth/drive.activity',\n  //   activityReadonly: 'https://www.googleapis.com/auth/drive.activity.readonly',\n  //   scripts: 'https://www.googleapis.com/auth/drive.scripts',\n  // },\n};\n\nexport const SCOPES = [\n  DRIVE_API_SCOPES.recommended.file,\n  DRIVE_API_SCOPES.recommended.install,\n].join(' ');\n\n// string names\nexport const DRIVE_UI_INTEGRATION_TYPES = {\n  openWithAppSpecificDocument: 'openWithAppSpecificDocument',\n  openWithGoogleWorkspaceDocument: 'openWithGoogleWorkspaceDocument',\n  newButton: 'newButton',\n};\n\n// paths\nexport const REDIRECT_URLS = {\n  chooser: '/chooser',\n  photo: '/editor?category=photos',\n}","import {\n  DRIVE_MULTIPART_UPLOAD_URL,\n  // DRIVE_API_FILE_SEARCH_PICSART_ROOT_FOLDER_QUERY,\n  // DRIVE_API_FILE_RESOURCE_FIELDS,\n} from './constants';\n\nconst DriveApiV3 = {\n  openWithState: null,\n  newButtonState: null,\n  // driveActiveImageId: null,\n  imgOptions: null,\n\n  async getImageById(fileId) {\n    try {\n      const response = await gapi.client.drive.files.get({\n        fileId,\n        alt: 'media',\n        fields: 'id, name',\n      });\n      return `data:${response.headers['Content-Type']};base64, ${btoa(response.body)}`\n    } catch (error) {\n      console.log(error) \n    }\n  },\n\n  async getFileFields({fileId, fields}) {\n    try {\n      const response = await gapi.client.drive.files.get({\n        fileId,\n        fields,\n      });\n      const result = await JSON.parse(response.body);\n      return result;\n    } catch (error) {\n      console.log(error)\n    }\n  },\n\n  async uploadFile(body) {\n    try {\n      const reponse = await fetch(DRIVE_MULTIPART_UPLOAD_URL, {\n        method: 'POST',\n        headers: new Headers({ Authorization: `Bearer ${gapi.auth.getToken().access_token}` }),\n        body,\n      });\n      const result = await reponse.json();\n      return result;\n    } catch (error) {\n      console.log(error)\n    }\n  },\n\n  // createFile({ resource, fields }) {\n  //   return (\n  //     gapi.client.drive.files.create({\n  //       resource,\n  //       fields,\n  //     })\n  //       .then(res => {\n  //         console.log(res);\n  //         const reso = JSON.parse(res.body);\n  //         console.log(reso);\n  //         const { files } = JSON.parse(res.body);\n  //         console.log(files);\n  //         return files || reso;\n  //       })\n  //       .catch(err => console.error(err))\n  //   );\n  // },\n};\n\nexport default DriveApiV3;\n\n// const token = gapi.auth.getToken().access_token;\n// fetch('https://appsmarket.googleapis.com/appsmarket/v2/customerLicense/58948318321/117831644331788887278', {\n//   headers: new Headers({ Authorization: `Bearer ${token}` }),\n// })\n//   .then(res => res.json())\n//   .catch(err => {\n//     console.error(err);\n//   })","import {\n  API_KEY,\n  CLIENT_ID,\n  DISCOVERY_URLS,\n  SCOPES,\n  GOOGLE_API_CLIENT_API_SCRIPT_URL,\n  DRIVE_API_SCOPES,\n} from './constants';\nimport { handleAuthorizeDriveModal, isSameId, addScript } from './helpers';\n\nclass GapiClientLibrary {\n  async init() {\n    console.log('init check');\n    if (window.gapi) {\n      return;\n    }\n    console.log('init');\n    try {\n      await addScript(GOOGLE_API_CLIENT_API_SCRIPT_URL);\n      await GapiClientLibrary.loadClient();\n      await GapiClientLibrary.initClient();\n      return gapi;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  static loadClient() {\n    return new Promise((res, rej) => {\n      gapi.load('client:auth2', { callback: res, onerror: rej });\n    });\n  }\n\n  static loadDriveShare() {\n    return new Promise((res, rej) => {\n      gapi.load('drive-share', { callback: res, onerror: rej });\n    });\n  }\n\n  static initClient() {\n    return (\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_URLS,\n        scope: SCOPES,\n      })\n    );\n  }\n\n  async signInWithGoogle() {\n    await this.init();\n    try {\n      const currentUser = await gapi.auth2.getAuthInstance().signIn();\n      return currentUser;\n    } catch (error) {\n      // error case: when user closes sign in prompt\n      console.log(error);\n      return error;\n    }\n  }\n\n  async signOutGoogle() {\n    await this.init();\n    gapi.auth2.getAuthInstance().signOut();\n  }\n\n  async revokeAccess() {\n    await this.init();\n    gapi.auth2.getAuthInstance().disconnect();\n  }\n\n  async shareDrive(resetProgressCallback) {\n    console.log('shareDrive');\n    await this.init();\n    await GapiClientLibrary.loadDriveShare();\n    const token = gapi.auth.getToken().access_token;\n    const s = await new gapi.drive.share.ShareClient();\n    s.setOAuthToken(token);\n    s.setItemIds(this.driveActiveImageId);\n    s.showSettingsDialog();\n    this.driveActiveImageId = null;\n    resetProgressCallback();\n  }\n\n  async getGrantedScopes() {\n    await this.init();\n    return gapi.auth2.getAuthInstance().currentUser.get().getGrantedScopes();\n  };\n\n  async authUser(userIdFromDrive) {\n    await this.init();\n    console.log('userIdFromDrive', userIdFromDrive);\n    const GoogleAuth = gapi.auth2.getAuthInstance();\n\n    console.log(GoogleAuth)\n    if(GoogleAuth) {\n    if (GoogleAuth.isSignedIn.get()) {\n      const grantedScopes = GoogleAuth.currentUser.get().getGrantedScopes();\n      const { recommended: { appdata, file, install } } = DRIVE_API_SCOPES;\n      if (grantedScopes.includes(appdata) && grantedScopes.includes(file) && grantedScopes.includes(install)) {\n\n      }\n      console.log(grantedScopes)\n      // check for scopes\n      if (userIdFromDrive) {\n        const isSameUser = isSameId(GoogleAuth.currentUser.get().getId(), userIdFromDrive);\n        if (isSameUser) {\n          console.log('already signin from drive and existing are same!!', userIdFromDrive);\n          return userIdFromDrive;\n        }\n        this.openWithState = null;\n        this.driveActiveImageId = null;\n        console.log('isSameUser is false');\n        console.log('signOut');\n        GoogleAuth.signOut();\n      } else {\n        console.log('userIdFromDrive is undefined');\n        return GoogleAuth.currentUser.get();\n      }\n    }\n    }\n    const res = handleAuthorizeDriveModal();\n    if (!res) return\n\n    const currentUser = await this.signInWithGoogle();\n\n    if (currentUser.error) {\n      // this.authUser();\n      console.log('currentUser.error')\n      this.openWithState = null;\n      this.driveActiveImageId = null;\n      return;\n    }\n    // const grantedScopes = currentUser\n    if (userIdFromDrive) {\n      const isSameUser = isSameId(currentUser.getId(), userIdFromDrive);\n      console.log('isSameUser', isSameUser);\n      if (!isSameUser) {\n        GoogleAuth.disconnect();\n        // eslint-disable-next-line\n        const isUserAcceptedNewSigninFlow = confirm(\"Drive account and choosed account doesn't match. Choose account again\");\n        if (isUserAcceptedNewSigninFlow) {\n          console.log('isUserAcceptedNewSigninFlow', isUserAcceptedNewSigninFlow);\n          // return handleAuthProcess(null, userIdFromDrive);\n        }\n        // eslint-disable-next-line\n        alert('Your state was lost');\n        return;\n      }\n      console.log('signin from drive first time');\n      return currentUser;\n    }\n    console.log('signin independent first time');\n    return currentUser;\n  }\n}\n\nconst Gapi = new GapiClientLibrary();\n\nexport default Gapi;\n","import { API_KEY } from './constants';\nimport Gapi from './gapi';\n\nclass PickerWidget {\n  async init(callback) {\n    await Gapi.authUser();\n    console.log('initPicker');\n    await PickerWidget.loadPicker();\n    await PickerWidget.createPicker(callback);\n    console.log('picker created');\n  }\n\n  static loadPicker() {\n    return new Promise((res, rej) => {\n      gapi.load('picker', { callback: res, onerror: rej });\n    });\n  }\n\n  static async createPicker(callback) {\n    console.log(callback);\n    const oauthToken = gapi.auth.getToken().access_token;\n\n    const myDriveView = new google.picker.DocsView(google.picker.ViewId.FOLDERS)\n      .setLabel('My Drive')\n      .setOwnedByMe(true)\n      .setIncludeFolders(true)\n      .setSelectFolderEnabled(true);\n\n    // const sharedDriveView = new google.picker.DocsView(google.picker.ViewId.FOLDERS)\n    //   .setEnableDrives(true)\n    //   .setIncludeFolders(true)\n    //   .setSelectFolderEnabled(true);\n\n    // const sharedWithMeView = new google.picker.DocsView(google.picker.ViewId.FOLDERS)\n    //   .setLabel('Shared with Me')\n    //   .setOwnedByMe(false)\n    //   .setIncludeFolders(true)\n    //   .setSelectFolderEnabled(true);\n\n    // const starredView = new google.picker.DocsView(google.picker.ViewId.FOLDERS)\n    //   .setLabel('Starred')\n    //   .setStarred(true)\n    //   .setIncludeFolders(true)\n    //   .setSelectFolderEnabled(true);\n\n    const picker = new google.picker.PickerBuilder()\n      .addView(myDriveView)\n      // .addView(sharedDriveView)\n      // .addView(sharedWithMeView)\n      // .addView(starredView)\n      .setOAuthToken(oauthToken)\n      .setDeveloperKey(API_KEY)\n      .setCallback(data => PickerWidget.pickerCallback(data, callback))\n      .enableFeature(google.picker.Feature.SUPPORT_DRIVES)\n      .setTitle('Pick a folder')\n      .build();\n    picker.setVisible(true);\n  }\n\n  static async pickerCallback(data, callback) {\n    console.log(data)\n    if (data[google.picker.Response.ACTION] === google.picker.Action.PICKED) {\n      const folder = data[google.picker.Response.DOCUMENTS][0];\n      console.log(folder)\n      callback(folder.id)\n    }\n  }\n}\n\nconst PickerFolder = new PickerWidget();\n\nexport default PickerFolder;\n\n\n\n// class Person {\n//   static async create () {\n//       return new Promise((res, rej) => {\n//           setTimeout(() => res(console.log(‘created’)), 2000)\n//       })\n//   }\n// }\n// var newInstance = await Person.create();\n// console.log(‘>>>’);","// import { getImgBlobAndSave } from 'utils';\n// import { getPdfBlobAndSave } from 'components/common/DownloadDropdown/download';\n\nimport DriveApiV3 from './driveApiV3';\nimport { DRIVE_UI_INTEGRATION_TYPES } from './constants';\nimport PickerFolder from './pickerApi';\nimport Gapi from './gapi';\n\nexport const addScript = url => new Promise(res => {\n  const script = document.createElement('script');\n  script.src = url;\n  script.onload = () => {\n    res();\n  };\n  document.body.appendChild(script);\n});\n\nexport const isSameId = (id1, id2) => id1 === id2;\n\nexport const getDriveUiIntegrationType = state => {\n\n  console.log(state)\n  const stateKeys = Object.keys(state);\n\n  const isUserId = stateKeys.includes('userId');\n  const isAction = stateKeys.includes('action');\n  const isIds = stateKeys.includes('ids');\n  const isExportIds = stateKeys.includes('exportIds');\n  const isFolderId = stateKeys.includes('folderId');\n  // const isResourceKeys = stateKeys.includes('resourceKeys');\n  // const isFolderResourceKey = stateKeys.includes('folderResourceKey');\n\n  /* userId and action are general for Open with and New button actions,\n    ids are for handling an Open with for an app-specific document,\n    exportIds are for handling an Open with for a Google Workspace document,\n    folderId is for handling a New URL */\n\n  if (isUserId && isAction && isIds && state.action === 'open') {\n    return DRIVE_UI_INTEGRATION_TYPES.openWithAppSpecificDocument;\n  }\n  if (isUserId && isAction && isExportIds && state.action === 'open') {\n    return DRIVE_UI_INTEGRATION_TYPES.openWithGoogleWorkspaceDocument;\n  }\n  if (isUserId && isAction && isFolderId && state.action === 'create') {\n    return DRIVE_UI_INTEGRATION_TYPES.newButton;\n  }\n};\n\n// export const getImageSize = src => new Promise(res => {\n//   const image = new Image();\n//   image.src = src;\n//   image.onload = () => {\n//     const { width, height } = image;\n//     res({ width, height });\n//   };\n// });\n\n// export const rgbColor1To255 = colorObj => {\n//   const colorObj255 = {};\n//   Object.entries(colorObj)\n//     .map(color => [color[0], Math.round(color[1] * 255)])\n//     .forEach(([name, value]) => colorObj255[name] = value);\n//   return colorObj255;\n// };\n\nexport const drawOnCanvas = async ({width, height, src}) => {\n  const canvas = document.getElementById('myCanvas');\n  const ctx = canvas.getContext('2d');\n  const baseImage = new Image();\n  baseImage.src = src;\n  baseImage.onload = () => {\n    canvas.width = width / 7;\n    canvas.height = height / 7;\n    ctx.drawImage(baseImage, 0, 0);\n  };\n};\n\nexport const handleDriveUpload = async ({\n  baseGroup,\n  upscale,\n  fileImgName,\n  qualityValue,\n  type,\n  originalWidth,\n  originalHeight,\n  isPdf,\n  isDownload,\n}, parents) => {\n  const upscaleSize = upscale ? upscale === 'x2' ? 2 : 4 : undefined;\n  const blob = isPdf\n    ? await getPdfBlobAndSave({\n      baseGroup, originalWidth, originalHeight, fileImgName, qualityValue, type, upscaleSize,\n    })\n    : await getImgBlobAndSave({\n      baseGroup, originalWidth, originalHeight, fileImgName, qualityValue, type, isDownload, upscaleSize,\n    });\n\n  console.log(blob);\n  const metadata = {\n    name: fileImgName,\n    mimeType: type,\n    parents,\n  };\n  console.log(metadata);\n  const form = new FormData();\n  form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));\n  form.append('file', blob);\n\n  console.log(form);\n\n  const res = await DriveApiV3.uploadFile(form);\n\n  Gapi.driveActiveImageId = res.id;\n};\n\nexport const uploadToDriveForPickerFolder = async (folderId) => {\n\n  const metadata = {\n    name: '0000emptyfile',\n    mimeType: DriveApiV3.imgOptions.mimeType,\n    parents: [folderId],\n  };\n  console.log(metadata);\n  const b64Data = DriveApiV3.imgOptions.src.split(',')[1]\n  const blob = b64toBlob(b64Data, DriveApiV3.imgOptions.mimeType);\n  const form = new FormData();\n  form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));\n  form.append('file', blob);\n\n  console.log(form);\n\n  const res = await DriveApiV3.uploadFile(form);\n  console.log(res)\n};\n\nexport const handlDriveUploadForPicker = async imgSettings => {\n  PickerFolder.init(uploadToDriveForPickerFolder);\n};\n\nexport const handleAuthorizeDriveModal = () => {\n  // eslint-disable-next-line\n  const answer = confirm('Authorization required');\n\n  return answer\n}\n\n\nconst b64toBlob = (b64Data, contentType) => {\n  const byteCharacters = atob(b64Data);\n  const byteArrays = [];\n\n  const byteNumbers = new Array(byteCharacters.length);\n  for (let i = 0; i < byteCharacters.length; i++) {\n    byteNumbers[i] = byteCharacters.charCodeAt(i);\n  }\n\n  const byteArray = new Uint8Array(byteNumbers);\n  byteArrays.push(byteArray);\n\n  const blob = new Blob(byteArrays, {type: contentType});\n  return blob;\n}\n","import { useEffect } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n// import { useDispatch } from 'react-redux';\n\n// import canvas from 'store/canvas';\nimport { uploadToDriveForPickerFolder } from '../gDrive/helpers';\n\nimport {\n  getDriveUiIntegrationType,\n  drawOnCanvas,\n} from './helpers';\nimport DriveApiV3 from './driveApiV3';\nimport { DRIVE_UI_INTEGRATION_TYPES, REDIRECT_URLS } from './constants';\nimport Gapi from './gapi';\n\nconst useGDrive = () => {\n  console.log('useGDrive');\n  const location = useLocation();\n  const history = useHistory();\n  // const dispatch = useDispatch();\n\n  useEffect(() => {\n    console.log('useGDrive eff');\n\n    const searchParams = new URLSearchParams(location.search);\n\n    if (!searchParams.has('state')) {\n      return null;\n    }\n\n    const state = JSON.parse(searchParams.get('state'));\n    \n    console.log(state);\n    \n    const integrationType = getDriveUiIntegrationType(state);\n\n    console.log(integrationType);\n\n    if (!integrationType) {\n      history.replace(REDIRECT_URLS.chooser);\n      return\n    }\n\n    // sessionStorage.setItem('editor');\n\n    (async () => {\n      await Gapi.init();\n\n      const user = await Gapi.authUser(state.userId);\n\n      console.log(user)\n      if (!user) {\n        history.replace(REDIRECT_URLS.photo);\n        return;\n      }\n\n      if (integrationType === DRIVE_UI_INTEGRATION_TYPES.openWithAppSpecificDocument) {\n        DriveApiV3.openWithState = state;\n        const id = DriveApiV3.openWithState.ids[0]\n        const fields = await DriveApiV3.getFileFields({ fileId: id, fields: 'imageMediaMetadata, mimeType'});\n        console.log(fields)\n        // case filed error\n        const { imageMediaMetadata: { width, height }, mimeType } = fields;\n        const src = await DriveApiV3.getImageById(id);\n\n        DriveApiV3.imgOptions = { src, mimeType, width, height };\n        // dispatch(canvas.actions.setBlankCanvasSettings({\n        //   blank: true,\n        //   width,\n        //   height,\n        // }));\n        // history.replace(`/editor?customSize=${width}x${height}&unit=px&category=photos`);\n        drawOnCanvas(DriveApiV3.imgOptions);\n        return;\n      }\n\n      // if (integrationType === DRIVE_UI_INTEGRATION_TYPES.openWithGoogleWorkspaceDocument) {}\n\n      if (integrationType === DRIVE_UI_INTEGRATION_TYPES.newButton) {\n        DriveApiV3.newButtonState = state\n        uploadToDriveForPickerFolder(state.folderId)\n        return\n      }\n      //\n    })();\n  });\n};\n\nexport default useGDrive;\n","import { useState } from \"react\";\nimport { Gapi, handlDriveUploadForPicker } from \"../gDrive\";\n\nconst Button = () => {\n    const [scopes, setScopes] = useState([]);\n\n    console.log(Gapi);\n\n    const handleShareDriveClick = () => {\n        Gapi.shareDrive()\n    }\n    \n    const handleAuthClick = () => {\n        Gapi.authUser();\n    }\n    \n    const handleUploadClick = () => {\n        handlDriveUploadForPicker()\n    }\n\n    const handleSignInClick = () => {\n        Gapi.signInWithGoogle()\n    }\n\n    const handleSignOutClick = () => {\n        Gapi.signOutGoogle()\n    }\n\n    const handleRevokeAccessClick = () => {\n        Gapi.revokeAccess()\n    }\n\n    const handleGrantedScopesClick = async () => {\n        const scopes = await Gapi.getGrantedScopes();\n        setScopes(scopes.split(' ').filter(val => val.includes('auth')))\n    };\n\n\n    return (\n        <>\n            <div>\n                <button onClick={handleShareDriveClick}>Share Drive</button>\n                <button onClick={handleAuthClick}>Authorize</button>\n                <button onClick={handleUploadClick}>upload</button>\n                <button onClick={handleSignInClick}>signIn</button>\n                <button onClick={handleSignOutClick}>signOut</button>\n                <button onClick={handleRevokeAccessClick}>revoke access</button>\n                <button onClick={handleGrantedScopesClick}>see granted scopes</button>\n            </div>\n            {scopes.map(scope => <p key={scope}>{scope}</p>)}\n            <div>\n                <canvas id=\"myCanvas\"></canvas>\n            </div>\n            {/* <img id=\"driveImg\" src=\"\" alt=\"img\"/> */}\n        </>\n    )\n}\n\nexport default Button\n","import { Switch, Route } from 'react-router-dom';\nimport Button from './components/button';\nimport { useGDrive } from './gDrive';\n\nconst Main = () => <div>hi</div>;\n\nconst Code = () => <pre>console.log('aaaaaaaaa')</pre>\n\nconst Router = () => {\n  console.log('aa')\n    useGDrive();\n\n    return (\n      <div>\n        <Button/>\n        <Code/>\n        <Switch>\n          <Route exact path=\"/\" component={Main} />\n          <Route exact path=\"/code\" component={Code} />\n        </Switch>\n      </div>\n    );\n  };\n  export default Router;","import { BrowserRouter } from 'react-router-dom';\nimport Router from './Routes';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Router/>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}